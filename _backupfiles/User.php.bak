<?php

namespace app\api\controller\v2;

use app\api\validate\Token;
use app\common\controller\ApiBase;
use app\common\model\UserCollect;
use app\common\model\User as UserModel;
use app\common\model\UserComment;
use app\common\model\UserCommentOperate;
use app\common\model\UserCommentReply;
use app\common\model\UserMovieHistory;
use app\common\model\Verifiycode;
use think\facade\Validate;
use app\comm\controller\SendEmail;
use app\common\model\Movie;
use think\Db;

class User extends ApiBase
{
    public function __construct()
    {
        parent::__construct();
    }

    public function login()
    {
        $param = $this->param;
        $rule = [
            'mobile' => 'require',
            'sms_code' => 'require|length:6',
        ];
        $msg = [
            'mobile.require' => '请输入真实有效的手机号',
            'sms_code.require' => '请输入短信验证码',
            'sms_code.length' => '短信验证码格式不正确',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $res = app('app\common\model\User')->login($param);
        return $this->dataToJson(0, '登录成功', $res);
    }

    /**
     * 登出
     * @return \think\response\Json
     */
    public function logout()
    {
//        $param = $this->param;
//        $rule = [
//            'user_id' => 'require',
//        ];
//        $msg = [
//            'user_id.require' => '请先登录',
//        ];
//        $validate = Validate::make($rule, $msg);
//        if (!$validate->check($param)) {
//            return $this->dataToJson(1, $validate->getError());
//        }
//        $result = app('user')->deleteByWhere($param);
//        if (!$result) {
//            return $this->dataToJson(1, '注销失败', []);
//        }
//        return $this->dataToJson(0, '注销成功', []);
    }

    /**
     * 修改用户信息
     * @return \think\response\Json
     */
    public function save_user_info()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }

        $param = $this->param;
//        $rule = [
//            'user_id' => 'require',
//        ];
//        $msg = [
//            'user_id.require' => '请先登录',
//        ];
//        $validate = Validate::make($rule, $msg);
//        if (!$validate->check($param)) {
//            return $this->dataToJson(1, $validate->getError());
//        }
        $result = app('app\common\model\User')->updateByWhere(['user_id' => $userInfo['user_id']], $param);
        if (!$result) {
            return $this->dataToJson(1, '修改失败', []);
        }
        return $this->dataToJson(0, '修改成功', []);
    }

    /**
     * 收藏/取消收藏
     * @return \think\response\Json
     */
    public function collect_movie()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $rule = [
            'movie_id' => 'require',
            'type' => 'require',
        ];
        $msg = [
            'movie_id.require' => '请选择要收藏的电影',
            'type.require' => '请选择状态',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $param['user_id'] = $userInfo['user_id'];
        $result = app('app\common\model\UserCollect')->collectOperate($param);
        if (!$result) {
            return $this->dataToJson(1, '操作失败', []);
        }
        return $this->dataToJson(0, '操作成功', []);
    }

    /**
     * 评论列表
     * @return \think\response\Json
     */
    public function get_comment_list()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            $userInfo = false;
        }
        $param = $this->param;
        $rule = [
            'movie_id' => 'require',
            'page' => 'require',
        ];
        $msg = [
            'movie_id.require' => '请选择电影',
            'page.require' => '请填写页码',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $result = app('app\common\model\UserComment')->getMovieCommentList($param, $userInfo);
        return $this->dataToJson($result['code'], $result['message'], $result['object']);
    }

    /**
     * 发表评论
     * @author chuanbei32
     * @return \think\response\Json
     */
    public function user_comment()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }

        $param = $this->param;
        $param['user_id'] = $userInfo['user_id'];

        $rule = [
            'movie_id' => 'require',
            'content' => 'require|min:10|max:2000',
            'star' => 'float',
            'title' => 'min:3|max:50',
        ];
        $msg = [
            'movie_id.require' => '请选择电影',
            'content.require' => '请输入评论内容',
            'content.min' => '评论内容最少10个字',
            'content.max' => '评论内容最多2000个字',
            'star.require' => '请选择星级',
            'star.float' => '星级类型有误',
            'title.require' => '请输入评论标题',
            'title.min' => '评论标题最少3个字',
            'title.max' => '评论标题最多50个字',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $result = app('app\common\model\UserComment')->insert($param);
        // 统计评分
        $sumStar = UserComment::where('movie_id', $param['movie_id'])->sum('star');
        $sumAvg = $sumStar + ($param['star'] ?? 0);
        $avgStar = $sumAvg / UserComment::where('movie_id', $param['movie_id'])->count('comment_id') ?? 1;
        $res = Movie::where('id', $param['movie_id'])->update(['self_rating' => sprintf('%.1f', $avgStar)]);
        if (!$result) {
            return $this->dataToJson(1, '评论失败', []);
        }

        $item = UserComment::field('comment_id,user_id,content,create_time, star, title, praise_num as operate_num, negative_num')
            ->where(['movie_id' => $param['movie_id']])
            ->with(['user_comment_operate' => function ($query) {
                $query->where('operate', 3)->where('delete_time', '<>', 0);
            }, 'user_comment_reply' => function ($query) {
                $query->field('reply_id, user_id, comment_id, content')->order('reply_id', 'desc')->limit(2);
            }])
            ->withCount('user_comment_reply')
            ->order('create_time desc')
            ->find();

        $user = app('app\common\model\User')->findByAttributes(['user_id' => $item['user_id']], 'user_img,nickname');
        if (empty($user)) {
            $user['user_img'] = '';
            $user['nickname'] = '';
        }
        $item['user_img'] = false === strpos($user['user_img'], 'http') ? config('app.app_host') . '/images/avt.jpg' : $user['user_img'];
        $item['nickname'] = $user['nickname'];
        $item['create_time'] = date('Y-m-d H:i:s', $item['create_time']);
        $item['is_operate'] = 0;
        if (!empty($userInfo)) {
            $userid = $userInfo['user_id'];
            if ($item['user_id'] == $userid) {
                1 == ($item->user_comment_operate->operate ?? 0) && $item['is_operate'] = 1;
                unset($item->user_comment_operate);
            }
        }
        ($item->user_comment_reply ?? false) || $item->user_comment_reply = [];
        if (null != $item->user_comment_reply) {
            foreach ($item->user_comment_reply as &$items) {
                $items->username = $items->user_data->nickname ?? '';
                unset($items->user_data);
            }
        }
        unset($item->user_comment_operate);

        return $this->dataToJson(0, '评论成功', $item);
    }

    //邮箱配置
    private $mail = [
        'host' => 'smtp.163.com', //SMTP服务器地址
        'send_email' => '18810821556@163.com', //发送邮件的邮箱账号
        'password' => 'Yr981121', //发送邮件的邮箱密码（部分邮箱为授权码）
    ];

    public function send_email()
    {
        $param = $this->param;
        $rule = [
            'user_email' => 'require|email',
        ];
        $msg = [
            'user_email.require' => '请选择评论',
            'user_email.email' => '请先登录',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }

        //生成验证码
        $code = random_num();

        //发送邮件
        $SendMail = new SendEmail();

        //邮件模板
        $html = $SendMail->emailTemp($code);

        //发送邮件
        $r = $SendMail->send($param['user_email'], $this->mail, '验证码', $html);

        $data = ['email' => $param['user_email'], 'type' => $param['type'], 'verifiy_code' => $code, 'platform' => 1];
//        print_r($data);die;
        $res = app('app\common\model\Verifiycode')->setInsert($data);
        if ($res['code'] == 0) {
            if ($r) {
                return $this->dataToJson($res['code'], $res['message']);
            }
        }
        return $this->dataToJson($res['code'], $res['message']);
    }

    /**
     * 问题反馈
     * userid   用户ID
     * content  反馈内容
     * @return \think\response\Json
     */
    public function userQuestionFeedback()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }

        $param = $this->param;
        $rule = [
            'content' => 'require',
        ];
        $msg = [
            'content.require' => '反馈内容不能为空',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }

        $param['user_id'] = $userInfo['user_id'];
        $res = app('app\common\model\FeedBack')->add($param);
        if ($res) {
            return $this->dataToJson(0, '提交成功');
        } else {
            return $this->dataToJson(1, '提交失败');
        }
    }

    /**
     * 评论操作
     * user_id   用户ID
     * comment_id  评论ID
     * @return \think\response\Json
     */
    public function set_user_inform_comment()
    {
        try {
            try {
                $userInfo = getUserData();
            } catch (\Exception $e) {
                return $this->dataToJson(1, $e->getMessage());
            }
            Db::startTrans();
            $param = $this->param;
            $param['user_id'] = $userInfo['user_id'];
            $rule = [
                'comment_id' => 'require|integer',
                //                'type' => 'require|integer',
                //                'operate' => 'require|integer',
            ];
            $msg = [
                'comment_id.require' => '请选择评论',
                'comment_id.integer' => '评论类型有误',
                //                'type.require' => '请选择评论',
                //                'type.integer' => '评论类型有误',
                //                'operate.require' => '请选择评论',
                //                'operate.integer' => '评论类型有误',
            ];
            $validate = Validate::make($rule, $msg);
            if (!$validate->check($param)) {
                return $this->dataToJson(1, $validate->getError());
            }
            $tType = $param['type'] ?? 1;
            $tOperate = $param['operate'] ?? 1;
            $data = [
                'user_id' => $param['user_id'],
                'comment_id' => $param['comment_id'],
                'type' => $tType,
                'operate' => $tOperate,
            ];
            $result = app('app\common\model\UserCommentOperate')->findByAttributes($data, 'user_id');
            if (!empty($result)) {
                $res = app('app\common\model\UserCommentOperate')->deleteByWhere($data);
            } else {
                $res = app('app\common\model\UserCommentOperate')->insert($data);
            }
            if (!$res) {
                throw new \Exception('操作失败');
            }
            switch ($tOperate) {
                case 1:
                    if (1 == $tType) {
                        UserComment::where('comment_id', $param['comment_id'])->setInc('praise_num');
                    }
                    if (2 == $tType) {
                        UserCommentReply::where('reply_id', $param['comment_id'])->setInc('praise_num');
                    }
                    break;
                case 2:
                    if (1 == $tType) {
                        UserComment::where('comment_id', $param['comment_id'])->setDec('praise_num');
                    }
                    if (2 == $tType) {
                        UserCommentReply::where('reply_id', $param['comment_id'])->setDec('praise_num');
                    }
//                    if (1 == $tType) UserComment::where('comment_id', $param['comment_id'])->setDec('negative_num');
//                    if (2 == $tType) UserCommentReply::where('reply_id', $param['comment_id'])->setDec('negative_num');
                    break;
            }
            Db::commit();
            return $this->dataToJson(0, '操作成功', UserComment::where('comment_id', $param['comment_id'])->value('praise_num'));
        } catch (\Exception $e) {
            Db::rollback();
            return $this->dataToJson(1, $e->getMessage());
        }
    }

    /**
     * 用户回复（评论）
     * user_id   用户ID
     * comment_id  评论ID
     * comment  评论内容
     * @return \think\response\Json
     */
    public function set_user_reply_comment()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $param['user_id'] = $userInfo['user_id'];
        $rule = [
            'comment_id' => 'require|integer',
            'content' => 'require|min:1|max:200',
        ];
        $msg = [
            'comment_id.require' => '请选择评论',
            'comment_id.integer' => '评论类型有误',
            'content.require' => '请填写评论内容',
            'content.min' => '评论内容最少填写1个字',
            'content.max' => '评论内容最多不能超过200个字',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $res = app('app\common\model\UserCommentReply')->insert($param);
        if (!$res) {
            return $this->dataToJson(1, '回复失败');
        }
        $item = [
            'user_id' => $res->user_id,
            'reply_id' => (int)$res->reply_id,
            'comment_id' => $res->comment_id,
            'content' => $res->content,
            'create_time' => date('Y-m-d H:i:s', $res->create_time),
            'operate_num' => 0,
            'is_operate' => false,
            'nickname' => $res->user_data->nickname,
            'user_img' => $res->user_data->user_img,
        ];

        return $this->dataToJson(0, '回复成功', $item);
    }

    /**
     * 回复（评论）列表
     * comment_id  评论ID
     * page  页码
     * @return \think\response\Json
     */
    public function get_user_reply_comment_list()
    {
        //todo 逻辑
        $param = $this->param;
        $rule = [
            'comment_id' => 'require|integer',
            'page' => 'require|integer',
        ];
        $msg = [
            'comment_id.require' => '请选择评论',
            'comment_id.integer' => '评论类型有误',
            'page.require' => '请选择页码',
            'page.integer' => '页码类型有误',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $res = app('app\common\model\UserCommentReply')->getUserCommentReplyList($param);
        return $this->dataToJson($res['code'], $res['message'], $res['object']);
    }

    /**
     * 评论举报
     * @author chuanbei32
     * @return \think\response\Json
     */
    public function set_user_report_comment()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        try {
            $param = $this->param;
            $param['user_id'] = $userInfo['user_id'];
            $rule = [
                'comment_id' => 'require|integer',
                //            'content' => 'require|min:1|max:200',
            ];
            $msg = [
                'comment_id.require' => '请选择评论',
                'comment_id.integer' => '评论类型有误',
                //            'content.require' => '请填写评论内容',
                //            'content.min' => '评论内容最少填写1个字',
                //            'content.max' => '评论内容最多不能超过200个字',
            ];
            $validate = Validate::make($rule, $msg);
            if (!$validate->check($param)) {
                return $this->dataToJson(1, $validate->getError());
            }
            $tType = $param['type'] ?? 1;
            $data = [
                'user_id' => $param['user_id'],
                'comment_id' => $param['comment_id'],
                'type' => $tType,
                'operate' => 3,
                'report_content' => $param['content'],
            ];
            $result = app('app\common\model\UserCommentOperate')->findByAttributes($data, 'user_id');
            if (!empty($result)) {
                throw new \Exception('您已经举报过了');
            } else {
                $res = app('app\common\model\UserCommentOperate')->insert($data);
                if (!$res) {
                    throw new \Exception('操作失败');
                }
            }

            if (!$res) {
                throw new \Exception('操作失败');
            }
            return $this->dataToJson(0, '举报成功');
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
    }

    public function del_user_report_comment()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $userId = $userInfo['user_id'];
        $rule = [
            'comment_id' => 'require|integer',
        ];
        $msg = [
            'comment_id.require' => '请选择评论',
            'comment_id.integer' => '评论id有误',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $where = [
            'user_id' => $userId,
            'comment_id' => $param['comment_id']
        ];
        $result = app('app\common\model\UserComment')->findByAttributes($where);
        if (empty($result)) {
            return $this->dataToJson(1, '您只能删除自己评论');
        }
        Db::startTrans();
        try {
            //删除评论
            UserComment::where('comment_id', 'in', $param['comment_id'])->delete();
            //删除操作记录
            UserCommentOperate::where('comment_id', 'in', $param['comment_id'])->delete();
            //删除评论回复
            UserCommentReply::where('comment_id', 'in', $param['comment_id'])->delete();
            Db::commit();
            return $this->dataToJson(0, '删除成功');
        } catch (\Exception $e) {
            Db::rollback();
            return $this->dataToJson(1, $e->getMessage());
        }
    }

    public function del_user_report_comment_reply()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $userId = $userInfo['user_id'];
        $rule = [
            'reply_id' => 'require|integer',
        ];
        $msg = [
            'reply_id.require' => '请选择评论',
            'reply_id.integer' => '评论id有误',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $where = [
            'user_id' => $userId,
            'reply_id' => $param['reply_id']
        ];
        $result = app('app\common\model\UserCommentReply')->findByAttributes($where);
        if (empty($result)) {
            return $this->dataToJson(1, '您只能删除自己评论');
        }
        Db::startTrans();
        try {
            //删除评论回复
            UserCommentReply::where('reply_id', 'in', $param['reply_id'])->delete();
            //删除操作记录
            UserCommentOperate::where('comment_id', 'in', $param['reply_id'])->where('type', 2)->where('user_id', $userId)->delete();
            Db::commit();
            return $this->dataToJson(0, '删除成功');
        } catch (\Exception $e) {
            Db::rollback();
            return $this->dataToJson(1, $e->getMessage());
        }
    }

    /**
     * 收藏列表
     * @author chuanbei32
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getUserCollList()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }

        $page = $this->param['page'];
        $pageSize = $this->param['pageSize'];

        $res = UserCollect::where('user_id', $userInfo['user_id'])
            ->with('movie_datas')
            ->order('create_time', 'desc')
            ->page($page, $pageSize)
            ->select();
        $result = [];
        $res->each(function ($item) use (&$result) {
            if (empty($item['movie_datas'])) {
                return;
            }
            $tmp = [];
            if (isset($item['movie_datas'])) {
                $genre = isset($item['movie_datas']['genre']) ? json_decode($item['movie_datas']['genre'], true) : [];
            }
//            if (is_array($genre) && 1 < count($genre)) {
//                $genre = implode(' ',$genre);
//            }
            $lan = $item->movie_datas->movie_lan_datas;
            $tmp['version'] = $lan['version'];
            $tmp['id'] = $item['movie_datas']['id'];
            $tmp['title'] = $item['movie_datas']['title'];
            $tmp['originalTitle'] = $item['movie_datas']['original_title'];
            $info = explode('_', $item['movie_datas']['info']);
            $tmp['castDirector'] = $info[0] . '/' . $info[2];
            $tmp['country'] = $info[1];
            $tmp['date'] = date('Y-m-d', $lan['date']);
            $tmp['imageurl'] = $item['movie_datas']['imageurl'];
            $tmp['rating'] = $item['movie_datas']['rating'];
            $tmp['hits'] = $item['movie_datas']['hits'];
            $tmp['genre'] = $genre;
            $tmp['subtype'] = Movie::getSubtypeArr($item['movie_datas']['subtype']);
            $tmp['award_nomination'] = $item['movie_datas']['award_nomination'];
            $tmp['commentCount'] = $item->movie_datas->movie_com_datas->count();
            $tmp['countdown'] = ($t = $lan['date']) > time() ? (int)(abs(time() - $t) / 86400) : (int)(abs($t - time()) < 86400 ? 0 : -1);
            $result[] = $tmp;
        });
        return $this->dataToJson(0, '获取成功', $result);
    }

    /**
     * 用户信息
     * @author chuanbei32
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getUserInfo()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $res = UserModel::where('user_id', $userInfo['user_id'])->field('user_id, nickname, user_img, sex, user_email, birthday, user_mobile, is_vip, level_id, vip_start_time, vip_end_time')->find();
        $res['user_img'] = false === strpos($res['user_img'], 'http') ? config('app.app_host') . '/images/avt.jpg' : $res['user_img'];
        $res['is_vip'] = (bool)$res['is_vip'];
        // $res['vipLevel'] = $res->user_level->id;
        $res['vipLevel'] = $res['level_id'];
        $res['vip_start_time'] = empty($res['vip_end_time']) ? '0000-00-00 00:00:00' : date('Y-m-d H:i:s', $res['vip_start_time']);
        $res['vip_end_time'] = empty($res['vip_end_time']) ? '0000-00-00 00:00:00' : date('Y-m-d H:i:s', $res['vip_end_time']);
        // unset($res['level_id'], $res['user_level']);

        return $this->dataToJson(0, '获取成功', $res);
    }

    /**
     * 修改手机号
     * @author chuanbei32
     * @return \think\response\Json
     */
    public function modifyMobile()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $rule = [
            'mobile' => 'require',
            'sms_code' => 'require',
        ];
        $msg = [
            'mobile.require' => '新手机号必须填写',
            'sms_code.require' => '验证码必须填写',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        // 验证验证码
        $resCode = (new Verifiycode())->verifiyCode(['mobile' => UserModel::where('id', $userInfo['user_id'])->value('user_mobile')]);
        if (0 != $resCode['code']) {
            return ['code' => $resCode['code'], 'message' => $resCode['message'], 'object' => []];
        }
        $data = [
            'user_id' => $userInfo['user_id'],
            'user_mobile' => $param['mobile']
        ];

        $res = UserModel::update($data);
        if ($res) {
            return $this->dataToJson(1, '修改失败');
        }
        return $this->dataToJson(1, '修改成功');
    }

    /**
     * 设置历史记录
     * @author chuanbei32
     * @return \think\response\Json
     */
    public function setMovieHistory()
    {
//        $redis = new \Redis();
//        $redis->connect(Env::get('REDIS_HOST'), Env::get('REDIS_PORT'));
//        $redis->auth(Env::get('REDIS_PASSWD'));
//        $redis->select(2);

        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $postData = $this->request->post();
        $rule = [
            'movie_id' => 'require|number|gt:0',
            'timeline' => 'require|number|gt:0',
            'total_time' => 'require',
        ];
        $msg = [
            'movie_id.require' => '影视id必须填写',
            'movie_id.number' => '影视id必须填写',
            'movie_id.gt' => '影视id必须填写',
            'address_id.require' => '影视播放地址id必须填写',
            'address_id.number' => '影视播放地址id必须填写',
            'address_id.gt' => '影视播放地址id必须填写',
            'timeline.require' => '播放截止时间必须填写',
            'timeline.require' => '播放总时间必须填写',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($postData)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $historyInfo = UserMovieHistory::where('user_id', $userInfo['user_id'])->where('movie_id', $postData['movie_id'])->find();
        $time = time();
        $data = [
            'movie_id' => $postData['movie_id'],
            'address_id' => $postData['address_id'],
            'user_id' => $userInfo['user_id'],
            'timeline' => $postData['timeline'],
            'total_time' => $postData['total_time'],
            'create_time' => $time,
            'update_time' => $time,
            'delete_time' => 0
        ];
        if (empty($historyInfo)) {
            $res = UserMovieHistory::create($data);
        } else {
            $res = UserMovieHistory::where('id', $historyInfo['id'])->update($data);
        }
        if (empty($res)) {
            return $this->dataToJson(1, '记录失败');
        }
        return $this->dataToJson(0, '记录成功');
    }

    /**
     * 获取历史记录
     * @author chuanbei32
     * @return \think\response\Json
     * @throws \think\db\exception\DbException
     * @throws \think\exception\DbException
     */
    public function getMovieHistory()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $page = $param['page'] ?? 1;
        $pageSize = $param['pageSize'] ?? 20;
        $lst = UserMovieHistory::where('user_id', $userInfo['user_id'])
            ->with([
                'movieData' => function ($query) {
                    $query->field('id, title, imageurl');
                },
                'movieAddressDatas'
            ])
            ->order('update_time', 'desc')
            ->paginate($pageSize);
        $lst->each(function (&$item) {
            $item['movie_data'] || $item['movie_data'] = [];
        });
        return $this->dataToJson(0, '获取成功', $lst);
    }

    public function getMovieHistorById()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $rule = [
            'movie_id' => 'require',
        ];
        $msg = [
            'movie_id.require' => '影片id必须填写',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $lst = UserMovieHistory::where('user_id', $userInfo['user_id'])->where('movie_id', $param['movie_id'])->find();
        return $this->dataToJson(0, '获取成功', $lst);
    }

    public function delMovieHistorByIds()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $param = $this->param;
        $rule = [
            'id' => 'require',
        ];
        $msg = [
            'id.require' => '记录id必须填写',
        ];
        $validate = Validate::make($rule, $msg);
        if (!$validate->check($param)) {
            return $this->dataToJson(1, $validate->getError());
        }
        $lst = UserMovieHistory::where('id', 'in', $param['id'])->delete();
        return $this->dataToJson(0, '删除成功', $lst);
    }

    public function delMovieHistorAll()
    {
        try {
            $userInfo = getUserData();
        } catch (\Exception $e) {
            return $this->dataToJson(1, $e->getMessage());
        }
        $lst = UserMovieHistory::where('user_id', $userInfo['user_id'])->delete();
        return $this->dataToJson(0, '删除成功', $lst);
    }
}
