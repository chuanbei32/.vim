<?php
/**
 * tpshop
 * ============================================================================
 * 版权所有 2015-2027 深圳搜豹网络科技有限公司，并保留所有权利。
 * 网站地址: http://www.tp-shop.cn
 * ----------------------------------------------------------------------------
 * 商业用途务必到官方购买正版授权, 使用盗版将严厉追究您的法律责任。
 * 采用最新Thinkphp5助手函数特性实现单字母函数M D U等简写方式
 * ============================================================================
 * Author: 当燃      
 * Date: 2015-09-21
 */

namespace app\mobile\controller;
use app\common\logic\CartLogic;
use app\common\logic\FreightLogic;
use app\common\logic\OrderLogic;
use app\common\logic\User;
use app\common\model\Goods;
use app\common\model\PromOrder;
use app\common\model\UserAddress;
use app\common\model\Users;
use think\Db;
use think\Page;
use app\common\logic\GoodsLogic;
use think\Request;
use app\mobile\controller\Goods as G;

class Community extends MobileBase{

    public function GoodsList(){
        //$rank= I('get.rank', '');
        $user_id = cookie('user_id');
        $p=I('p/d',0);
        $goodsLogic = new GoodsLogic();
        $result = $goodsLogic->community_list($user_id,$p);

        $this->assign('goods_list', $result['goods_list']);
        $this->assign('point_rate', $result['point_rate']);//兑换率

        if (I("is_ajax")) {
            return $this->fetch('ajaxGoodsList'); //获取更多
        }
        return $this->fetch();
    }

    /**
     * 商品详情页
     */
    public function goodsInfo(){

        C('TOKEN_ON',true);
        $goodsLogic = new GoodsLogic();
        $goods_id = I("get.id/d" , 0);
        $Goods = new \app\common\model\Goods();
        $goods = $Goods::get($goods_id);
        //佣金
        $postage = 0;
        if($goods["is_free_shipping"] == 0){
            $freight_config = M("freight_config")->where(['template_id' => $goods['template_id']])->find();
            $postage = $freight_config["first_money"];
        }
        $goods['share_commission'] = ($goods["shop_price"] - $goods["cost_price"] - $postage) * 0.4;//print_r($goods["shop_price"]);
        $goods["jk_price"] = $goods["shop_price"] /10;
        if ($goods['is_virtual']==1 && $goods['virtual_indate'] <= time()) {
            //虚拟商品过期，就下架
            $goods->save(['is_on_sale'=>0]);
        }
        if(empty($goods) || $goods['is_on_sale'] !=1){
            $this->error('此商品不存在或者已下架');
        }
        $store_id = $goods['store_id'];
        if (cookie('user_id')) {
            $user = new User();
            $user->setUserById(cookie('user_id'));
            $user->visitGoodsLog($goods);
        }
        if (session('?user')) {
            session('login_goods_id',null);
        }else{
            session('login_goods_id',$goods_id);
        }
        $kf_config = tpCache('basic');
        $kf_config['im_choose'] = tpCache('basic.im_choose');
        $this->assign('kf_config',$kf_config);

        $goods->save(['click_count' => $goods['click_count'] + 1]); //点击数+1
        //获取商品属性id
        $goods_attribute = get_goods_attribute($goods_id);
        if ($goods['prom_type'] == 8) {
            //砍价活动(有规格)查询每个活动规格的是否已经卖完,卖完改状态
            $prom_id = Db::name('spec_goods_price')->where(["goods_id" => $goods_id, 'prom_id' => ['gt',0]])->value("prom_id");
            $bargain_item_id_arr = Db::name('promotion_bargain_goods_item')->where(['bargain_id' => $prom_id, 'goods_id' => $goods_id, 'goods_num' => ['exp', '<=buy_num'], 'item_id ' => ['gt', 0]])->getField('item_id',true);
            if (count($bargain_item_id_arr) > 0) {
                $bargain_item_id_str = implode(',', $bargain_item_id_arr);
                Db::name('spec_goods_price')->where(['prom_type' => 8, 'prom_id' => $prom_id, 'item_id' => ['in', $bargain_item_id_str]])->save(['prom_type' => 0, 'prom_id' => 0]);
            }
        }
        $spec_goods_price = M('spec_goods_price')->where("goods_id",$goods_id)->getField("key,price,store_count,item_id,prom_id,sku_id,give_integral"); // 规格 对应 价格 库存表
        $user_id = cookie('user_id');
        $is_distribution = 0;
        $item_id = key($spec_goods_price);
        if($user_id){
            $logic = new \app\common\logic\GoodsLogic;
            $checkGoods = $logic->checkGoods($user_id,$spec_goods_price);
            if($checkGoods["code"] == 1){
                $spec_goods_price = $checkGoods["spec_goods_price"];
            }
            $users = M("users")->where(["user_id"=>$user_id])->find();
            $is_distribution = $users["is_distribution"];
        }
        $this->assign('item_id',$item_id);
        $this->assign('is_distribution',$is_distribution);
        $filter_spec = $goodsLogic->get_spec($goods_id);
        $collect = Db::name('goods_collect')->where(array("goods_id"=>$goods_id ,"user_id"=>$user_id))->count();
        $this->assign('spec_goods_price', json_encode($spec_goods_price,true)); // 规格 对应 价格 库存表
        $this->assign('goods_attribute',$goods_attribute);//属性值
        $this->assign('filter_spec',$filter_spec);//规格参数
        //从店铺查看商品带有店铺id，检查改商品属于店铺还是平台
        if($store_id){
            if($goods['store_id'] != $store_id){
                //如果该商品不是店铺的，检查有没有绑定平台
                $store_bind_platform_goods = db('store_bind_platform_goods')->where(['store_id'=>$store_id,'goods_id'=>$goods['goods_id']])->count();
                if($store_bind_platform_goods){
                    $goods['store'] = db('store')->where(['store_id'=>$store_id])->find();
                }
            }
        }

        $time = time();
        $couponWhere = ['type' => 2,'status'=>1,'send_start_time'=>['elt', $time],'send_end_time'=>['egt', $time],'store_id'=>$goods['store_id']];
        $couponList = Db::name('coupon')
            ->alias('c')
            ->join('__GOODS_COUPON__ gc', 'gc.coupon_id=c.id ','left')
            ->where($couponWhere)
            ->where('createnum>send_num or createnum=0')
            ->getField('c.id, c.*,gc.goods_id,gc.goods_category_id');
        if ($couponList) {
            // 只显示与该商品有关的优惠券
            $couponWhere['use_type'] = 0;
            $ids_arr1 = Db::name('coupon')
                ->alias('c')
                ->join('__GOODS_COUPON__ gc', 'gc.coupon_id=c.id ','left')
                ->where($couponWhere)
                ->where('createnum>send_num or createnum=0')
                ->column('id');
            $ids_arr = [];
            $ids_arr1 && $ids_arr = $ids_arr1;
            $ids_arr2 = Db::name('goods_coupon')->where('goods_id',$goods_id)->whereOr('goods_category_id',$goods['cat_id3'])->column('coupon_id');
            if($ids_arr2){
                $ids_arr = array_merge($ids_arr,$ids_arr2);
            }
            if($ids_arr){
                foreach($couponList as $key=>$v){
                    if(!in_array($key,$ids_arr)){
                        unset($couponList[$key]);
                    }
                }
            }else{
                $couponList = [];
            }
            // 以上是添加的，减去不合格的
            if (cookie('user_id')) {
                $userCouponCid = Db::name('coupon_list')->where(['uid' => cookie('user_id'), 'store_id' => $goods['store_id']])->column('cid');
                foreach ($userCouponCid as $val) {
                    isset($couponList[$val]) && $couponList[$val]['is_own'] = 1;
                }
            }
        }
        if ($couponList) {
            $couponId = array_keys($couponList);
            $goodsCoupon = Db::name('goods_coupon')
                ->alias('gc')
                ->join('goods g', 'gc.goods_id=g.goods_id', 'left')
                ->join('goods_category gcat', 'gc.goods_category_id=gcat.id', 'left')
                ->where(['coupon_id' => ['in', $couponId]])
                ->field('gc.*, g.goods_name, gcat.mobile_name')
                ->select();
            $goodsCoupon1 = [];
            foreach ($goodsCoupon as $val) {
                if (isset($goodsCoupon1[$val['coupon_id']])) {
                    if (!empty($val['goods_name'])) {
                        $goodsCoupon1[$val['coupon_id']]['goods_name'] .= '；' . $val['goods_name'];
                    } else if (!empty($val['mobile_name'])) {
                        $goodsCoupon1[$val['coupon_id']]['mobile_name'] .= '；' . $val['mobile_name'];
                    }
                } else {
                    $goodsCoupon1[$val['coupon_id']] = $val;
                }
            }
        }else{
            $goodsCoupon1 = [];
        }

        $this->assign('coupon_list',$couponList);
        $this->assign('goods_coupon',$goodsCoupon1);

        $promGoods = Db::name('prom_goods')
            ->where(['status'=>1,'start_time'=>['elt', $time],'end_time'=>['egt', $time],'store_id'=>$goods['store_id'],'id'=>$goods['prom_id']])
            ->find();
        if ($promGoods && $spec_goods_price) {
            foreach ($spec_goods_price as $val) {
                if ($val['prom_id'] == $goods['prom_id']) {
                    $promGoods['item_id'] = $val['item_id'];
                    break;
                }
            }
        } else {
            $promGoods['item_id'] = 0;
        }
        $promOrder = Db::name('prom_order')
            ->where(['status'=>1,'start_time'=>['elt', $time],'end_time'=>['egt', $time],'store_id'=>$goods['store_id']])
            ->order('orderby')
            ->select();
        $this->assign('prom_goods',$promGoods);
        $this->assign('prom_order',$promOrder);

        $PromOrder = new PromOrder();
        $prom_order_list = $PromOrder->where(['start_time' => ['<=', time()], 'end_time' => ['>', time()], 'status' => 1,'store_id'=>$goods['store_id']])->limit(3)->order('id desc')->select();
        $prom_order = [];
        if($prom_order_list){
            $prom_order = collection($prom_order_list)->append(['prom_detail'])->toArray();
        }

        $this->assign('prom_order',$prom_order);

        $good_num=Db::name('goods')->where(['store_id'=>$store_id,'is_on_sale'=>1])->count();
        $this->assign('goods',$goods);
        $prefix = config('database.prefix');
        $goods_attr = $Goods->goodsAttr()->join("{$prefix}goods_attribute","{$prefix}goods_attribute.attr_id={$prefix}goods_attr.attr_id",'left')
            ->where("{$prefix}goods_attribute.attr_index",1)->where("{$prefix}goods_attr.goods_id",$goods_id)->order("{$prefix}goods_attribute.order DESC")->select();
        $this->assign('goods_attr',$goods_attr);
        $this->assign('point_rate', tpCache('shopping.point_rate'));
        $this->assign('collect',$collect);
        $this->assign('good_num',$good_num);
        //推荐
        //查询总推荐产品
        $goods_count = Db::name('goods')->where(['is_recommend'=>1,'is_on_sale'=>1,'store_id'=>$store_id])->count();
        $limit = 0;
        if($goods_count > 6){
            $limit = rand(0,($goods_count-7));
        }
        $goods_recommend = Db::name('goods')->where(['is_recommend'=>1,'is_on_sale'=>1,'store_id'=>$store_id])->order("goods_id")->limit("$limit,6")->cache(true)->select();
        //$goods_recommend = Db::name('goods')->where(['is_recommend'=>1,'is_on_sale'=>1,'store_id'=>$store_id])->order("goods_id")->limit(6)->cache(true)->select();
        $this->assign("goods_recommend",$goods_recommend);

        return $this->fetch();
    }

    /**
     * 获取商品分享海报
     */
    public function goodsSharePoster(){
        $goods_id = I("get.id/d",0);
        $item_id = I("get.item_id/d",0);
        $prom_id = I("get.prom_id/d",0);
        $prom_type = I("get.prom_type/d",0);
        $leader_id = I("get.leader_id/d",0);
        if($leader_id == 0 && cookie('user_id')){
            $leader_id = cookie('user_id');
        }

        $data = ['goods_id'=>$goods_id,'item_id'=>$item_id,'prom_id'=>$prom_id,'prom_type'=>$prom_type,'first_leader'=>$leader_id];
        // 用户登录了，获取头像，昵称
        $user = session('user');
        if(!empty($user)){
            $data['head_pic'] = $user['head_pic'];
            $data['nickname'] = $user['nickname'];
        }
        if(empty($data['nickname'])){
            $data['nickname'] = '神秘人物';
        }
        $goodsLogic = new GoodsLogic();
        $goodsLogic->getGoodsSharePoster($data,3); // 加个2表示是手机端
    }

    public function buy_now(){
        $goods_id = input("goods_id/d");
        $Goods = new \app\common\model\Goods();
        $goods_info = $Goods::get($goods_id);
        $goods_info["jk_price"] = $goods_info["shop_price"] /10;
        $jk_price = $goods_info["jk_price"] * 5;
        //判断会员是否够50个极客豆
        $user_id = cookie('user_id');
        $info_assets = M("assets")->where("user_id=$user_id")->find();
        if($info_assets["JKbean"] < $jk_price){
            $this->error('极客豆不足', U('Mobile/Community/goodsList'));
        }
        //判断会员是否有未开奖的订单
        $where["user_id"] = $user_id;
        //$where["goods_id"] = $goods_id;
        $where["state"] = array("neq",2);
        $list = M("community_list")->where($where)->find();
        if($list){
            $this->error('还有未中奖的订单，没法继续下单', U('Mobile/Community/goodsList'));
        }
        //判断是否还有未提货或者未退回或者未领红包的订单
        $w_win["user_id"] = $user_id;
        //$w_win["goods_id"] = $goods_id;
        $w_win["award_state"] = array("eq",0);
        $list = M("community_win")->where($w_win)->find();
        if($list){
            $this->error('还有操作的中奖信息，没法继续下单', U('Mobile/Community/goodsList'));
        }
        //扣除会员50个豆  增加活跃度5个
        assetsLog($user_id,'极客豆拼团扣除',22,-$jk_price);
        //增加活跃度
        $liveness = $jk_price/10;
        $update_data = array(
            'liveness' => ['exp', 'liveness+' . $liveness],
        );
        $update = Db::name('users')->where('user_id', $user_id)->update($update_data);
        //生成拼团订单
        $key = I("item_id");
        if($key){
            $item_info = M("spec_goods_price")->where("goods_id=$goods_id and `key` =$key")->find();
            $item_id = $item_info["item_id"];
        }
        $data["user_id"] = $user_id;
        $data["goods_id"] = $goods_id;
        $data["item_id"] = $item_id;
        $data["goods_price"] = $goods_info["jk_price"];
        $data["add_time"] = time();
        $OrderLogic = new OrderLogic();
        $data["order_sn"] = $OrderLogic->get_order_sn();
        M("community_list")->add($data);
        $this->success("下单成功!!!", U('Mobile/Community/communityList'));
    }

    public function communityList(){
        $user_id = cookie('user_id');
        $where["user_id"] = $user_id;
        $CommunityList = new \app\common\model\CommunityList();
        $order_count = $CommunityList->where($where)->count();
        $page = new Page($order_count, 10);
        $order_list = $CommunityList->with('Goods')->where($where)->limit($page->firstRow . ',' . $page->listRows)->order('id desc')->select();
        $this->assign('order_list',$order_list);
        if ($_GET['is_ajax']) {
            return $this->fetch('ajax_communityList');
//            $this->ajaxReturn(['status'=>1,'msg'=>'获取成功','result'=>$order_list]);
        }
        return $this->fetch();
    }

    public function communityWin(){
        $user_id = cookie('user_id');
        $where["user_id"] = $user_id;
        //$CommunityList = new \app\common\model\CommunityList();
        $CommunityWin = new \app\common\model\CommunityWin();
        $order_count = $CommunityWin->where($where)->count();
        $page = new Page($order_count, 10);
        $order_list = $CommunityWin->with('Goods')->where($where)->limit($page->firstRow . ',' . $page->listRows)->order('id desc')->select();
        $this->assign('order_list',$order_list);
        if ($_GET['is_ajax']) {
            return $this->fetch('ajax_communityWin');
//            $this->ajaxReturn(['status'=>1,'msg'=>'获取成功','result'=>$order_list]);
        }
        return $this->fetch();
    }

    //领红包
    public function single_red_envelope(){
        $id = I("id");
        //判断是否领取了红包
        $w["id"] = $id;
        $info = M("community_win")->where($w)->find();
        $user_id = cookie('user_id');
        if($info["win_state"] != 0 || $info["award_state"] != 0 || $info["user_id"] != $user_id){
            $this->error("订单状态错误!");
        }
        M("community_win")->where($w)->update(["award_state"=>1]);
        assetsLog($user_id,'幸运极客豆红包奖励',24,$info['red_envelopes']);
        //推荐奖励
        $user = Users::get($user_id);
        $jkbean = round(($info['red_envelopes'] * 0.05),4);
        assetsLog($user['first_leader'],'会员幸运极客豆直推奖励',25,$jkbean);
        //团队奖励
        $this->team_reward($user,$info['red_envelopes']);
        $this->success("操作成功");
    }

    public function team_reward($user,$red_envelopes){
        $proportion = 0;
        while($user["user_id"] > 0 && $proportion < 10){
            if($user["grade"] == 1){
                $p = 2;
            }else if($user["grade"] == 2){
                $p = 4;
            }else if($user["grade"] == 3){
                $p = 7;
            }else if($user["grade"] == 4){
                $p = 10;
            }
            $jkbean = round(($red_envelopes * ($p - $proportion)/100),4);
            $proportion = $p;
            if($jkbean > 0){
                assetsLog($user['user_id'],'会员幸运极客豆团队奖励',26,$jkbean);
            }
            $user = Users::get($user['first_leader']);
        }
    }
    //寄卖
    public function Consignment(){
        $id = I("id");
        //判断是否领取了红包
        $w["id"] = $id;
        $info = M("community_win")->where($w)->find();
        $user_id = cookie('user_id');
        if($info["win_state"] != 1 || $info["award_state"] != 0 || $info["user_id"] != $user_id){
            $this->error("订单状态错误!");
        }
        //判断该订单有几个寄卖的货
        $where["c_id"] = $info["c_id"];
        $where["award_state"] = 3;
        $count = M("community_win")->where($where)->count();
        if($count >= 4){
            $this->error("该交易已寄卖4单!");
        }

        M("community_win")->where($w)->update(["award_state"=>3]);
        assetsLog($user_id,'订单寄卖',23,$info["goods_price"]);
        $this->success("操作成功");
    }

    public function address(){
        $user_id = cookie("user_id");
        $address_lists = Db::name('user_address')->where(array('user_id' => $user_id))->select();
        $region_list = Db::name('region')->cache(true)->getField('id,name');
        $this->assign('region_list', $region_list);
        $this->assign('lists', $address_lists);
        return $this->fetch();
    }
    //下单
    public function add_order(){
        $id = I("id");
        //判断是否下单
        $w["id"] = $id;
        $info = M("community_win")->where($w)->find();
        $user_id = cookie('user_id');
        if($info["win_state"] != 1 || $info["award_state"] != 0 || $info["user_id"] != $user_id){
            $this->error("订单状态错误!");
        }
        //判断是否有运费
        $goods_id = $info["goods_id"];
        $goods = Goods::get($goods_id);
        $is_free_shipping = $goods["is_free_shipping"];
        $first_money = 0;
        if($is_free_shipping == 0){
            $template_id = $goods["template_id"];
            $config = M("freight_config")->where("template_id = $template_id")->find();
            $first_money = $config["first_money"];
            $user = Users::get($user_id);
            //子账户扣主账户余额
            $main_user_id = $user["main_user_id"];
            if($main_user_id){
                $main_user = Users::get($main_user_id);
                if($main_user["user_money"] < $first_money){
                    $this->error("您的主账户余额不足以支付订单邮费!");
                }
                //扣除邮费
                accountLog($main_user_id,-$first_money,0,"子账户幸运极客豆扣除邮费");
            }else{
                if($user["user_money"] < $first_money){
                    $this->error("您的账户余额不足以支付订单邮费!");
                }
                //扣除邮费
                accountLog($user_id,-$first_money,0,"幸运极客豆扣除邮费");
            }

        }

        //修改交易状态
        M("community_win")->where($w)->update(["award_state"=>2]);
        //订单表
        $address_id = I("address_id");
        $address = Db::name('user_address')->where(array('address_id' => $address_id))->find();
        $order["order_sn"] = $info["order_sn"];
        $order["user_id"] = $user_id;
        $order["pay_status"] = 1;
        $order["consignee"] = $address["consignee"];
        $order["country"] = $address["country"];
        $order["province"] = $address["province"];
        $order["city"] = $address["city"];
        $order["district"] = $address["district"];
        $order["twon"] = $address["twon"];
        $order["address"] = $address["address"];
        $order["mobile"] = $address["mobile"];
        $order["shipping_price"] = $first_money;
        $order["pay_code"] = '极客豆';
        $order["pay_name"] = '幸运极客豆';
        $order["user_money"] = $first_money;
        $order["order_amount"] = $first_money + $goods["shop_price"];
        $order["total_amount"] = $first_money + $goods["shop_price"];
        $order["add_time"] = time();
        $order["pay_time"] = time();
        $order["store_id"] = 49;
        $order_id = M("order")->add($order);
        //订单商品表
        $order_goods["order_id"] = $order_id;
        $order_goods["goods_id"] = $goods_id;
        $order_goods["goods_name"] = $goods["goods_name"];
        $order_goods["goods_sn"] = $goods["goods_sn"];
        $order_goods["goods_num"] = 1;
        $order_goods["final_price"] = $goods["shop_price"];
        $order_goods["goods_price"] = $goods["shop_price"];
        $order_goods["cost_price"] = $goods["cost_price"];
        $order_goods["store_id"] = 49;
        if($info["item_id"]){
            $spec_info = M("spec_goods_price")->where("item_id=".$info["item_id"])->find();
            $order_goods["spec_key"] = $spec_info["key"];
            $order_goods["spec_key_name"] = $spec_info["key_name"];
        }
        $order_goods["member_goods_price"] = $goods["shop_price"];
        M("order_goods")->add($order_goods);
        //区域奖励
        $this->regional_rewards($address,$goods["shop_price"]);
        $this->success("下单成功!", U('Mobile/Community/communityWin'));
    }

    public function regional_rewards($address,$shop_price){
        $province = $address["province"];
        $city = $address["city"];
        $district = $address["district"];
        $jkbean = $shop_price/10;
        //查询是否有区县代理
        $d_agent = M("user_agent")->where("district=$district and level=1")->find();
        if($d_agent){
            $d_jkbean = round(($jkbean *0.03),4);
            assetsLog($d_agent["user_id"],"幸运极客豆区域奖励",27,$d_jkbean);
        }
        //查询是否有市级代理
        $c_agent = M("user_agent")->where("city=$city and level=2")->find();
        if($c_agent){
            $c_jkbean = round(($jkbean *0.02),4);
            assetsLog($c_agent["user_id"],"幸运极客豆区域奖励",27,$c_jkbean);
        }
        //查询是否有省级代理
        $p_agent = M("user_agent")->where("province=$province and level=3")->find();
        if($p_agent){
            $p_jkbean = round(($jkbean *0.01),4);
            assetsLog($p_agent["user_id"],"幸运极客豆区域奖励",27,$p_jkbean);
        }
    }

    public function communityGoodsList(){
        //$rank= I('get.rank', '');
        $user_id = cookie('user_id');
        $p=I('p/d',0);
        $goodsLogic = new GoodsLogic();
        $result = $goodsLogic->community_list($user_id,$p,51);

        $this->assign('goods_list', $result['goods_list']);
        $user = Users::get($user_id);
        $is_bonus = -1;
        if($user["community_grade"] > 0 && $user["community_num"] >= 10){
            $c_info = M("community_statistics")->where("user_id=$user_id")->find();
            $is_bonus = $c_info["is_bonus"];
        }
        $this->assign('is_bonus', $is_bonus);

        if (I("is_ajax")) {
            return $this->fetch('ajaxCommunityGoodsList'); //获取更多
        }
        return $this->fetch();
    }

    public function statistics(){
        $user_id = cookie('user_id');
        $info = M("community_statistics")->where("user_id=$user_id")->find();
        $user = Users::get($user_id);
        if($user["community_grade"] == -1){
            $this->error('您还没有成功参与社区拼团');
        }
        $this->assign("user",$user);
        $this->assign("info",$info);
        return $this->fetch();
    }

    public function aa(){
        $h = date("H");
        $time = strtotime(date("Y-m-d "."12:30:00"));

        if($h < 12 || $time <time()){
            echo 123;
        }
    }

<<<<<<< HEAD
    public function dispatching()
    {
        $id = I("id");
        $c_info = M("community_win")->where("id=$id")->find();
        $goods_id = $c_info["goods_id"];
        $address_id = I('address_id/d');
        if(!$goods_id){
            $dispatching_data = ['status'=>0,'msg'=>'请选择商品','result'=>'','addr_id'=>[],'is_not'=>1];
            $this->ajaxReturn($dispatching_data);
        }
        if($address_id){
            $address = UserAddress::where(['address_id'=>$address_id])->cache(60)->find();
            $region_id = $address["province"];
        }
        $dispatching_data = S("goods_dispatching_{$goods_id}_$region_id");
        if($dispatching_data){
            //return $dispatching_data["result"]["freight"];
            $this->ajaxReturn($dispatching_data);
        }
        $Goods = new Goods();
        $goods = $Goods->cache(true)->where('goods_id',$goods_id)->find();
        $freightLogic = new FreightLogic();
        $freightLogic->setGoodsModel($goods);
        $freightLogic->setRegionId($region_id);
        $freightLogic->setGoodsNum(1);
        $isShipping = $freightLogic->checkShipping();
        if($isShipping){
            $freightLogic->doCalculation();
            $freight = $freightLogic->getFreight();
            $dispatching_data = ['status'=>1,'msg'=>'可配送','result'=>['freight'=>$freight]];
        }else{
            $dispatching_data = ['status'=>0,'msg'=>'该地区不支持配送','result'=>'','is_not'=>1];
            //如果用户还没有填地址，则默认配送
            $user_id = session('user.user_id');
            if($user_id){
                $count =  UserAddress::where(['user_id'=>$user_id])->cache(60)->count();
                if(0 == $count){
                    $dispatching_data = ['status' => 0, 'msg' => '暂无收货地址', 'result' =>  ['freight' => 0]];
                }
            }
        }
        S("goods_dispatching_{$goods_id}_$region_id", $dispatching_data ,60);
        $this->ajaxReturn($dispatching_data);
    }
}
=======

}
>>>>>>> 1fa484f6 (极客豆兑换)
