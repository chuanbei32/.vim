<?php

namespace app\command;

use think\Db;
use think\Env;
use think\console\Input;
use think\console\Output;
use think\console\Command;
use app\extend\ReqHttp;
use app\api\model\IpMarket;
use app\api\model\GoodsShop;
use app\api\model\Area;
use app\api\model\Admin;
use app\api\model\GeneralizeOpportunist;
use app\api\model\FinanceFauxsumerismExpire;

class PromoteKeywordsProblem extends Command
{
    protected $redis = null;
    protected $redisKey = '';
    protected $redisDetailKey = '';

    protected $start_time = '';
    protected $end_time = '';

    protected $baiduDatas = [];
    protected $baiduDeatilDatas = [];

    protected $tmpNamePv = [];
    protected $userIds = [];

    public function __construct(?string $name = null)
    {
        $this->request = new ReqHttp();

        $this->rediskey = 'hk:report';
        $this->redisDetailKey = 'hk:report:detail';

        $this->initRedis();
        $this->redis->select(0);

        parent::__construct($name);
    }

    private function initRedis()
    {
        $this->redis = new \Redis();
        $this->redis->connect(Env::get('REDIS_HOST'), Env::get('REDIS_PORT'));
        $this->redis->auth(Env::get('REDIS_PASSWD'));
        $this->redis->select(0);
    }

    protected function configure()
    {
        $this->setName('promoteKeywordsProblem');
        $this->setDescription('推广关键字数据');
    }

    protected function execute(Input $input, Output $output)
    {
        starts:  {
        $output->writeln('开始执行历史关键词拆分任务');
        }
        while (true) {
            try {
                try {
                    data: {
                    $data = $this->redis->brPop($this->rediskey, 60);
                    }
                } catch (\RedisException $e) {
                    $this->initRedis();
                    goto data;
                }

                if (empty($data[1])) {
                    continue;
                }
                $output->writeln('开始执行本次历史关键词拆分任务');
                $data = json_decode($data[1], true);

                $this->start_time = $data['dates'];
                $this->end_time = $data['dates'];

                $lockFilePath = './public/lock';
                if (!is_dir($lockFilePath)) {
                    mkdir($lockFilePath, 777, true);
                }
                $lockFilePathName = $lockFilePath . '/' . preg_replace('/-/', '', $this->start_time) . '.report.lock';
                if (!is_file($lockFilePathName)) {
                    file_put_contents($lockFilePathName, 0);
                }
                $fp = fopen($lockFilePathName, 'r+'); // 获取锁信息
                if (!flock($fp, LOCK_EX | LOCK_NB)) {
                    $output->writeln('任务已在处理');
                    continue;
                }

                $userList = Admin::where('id', 'in', $data['ids'])->field('name')->select();
                if (empty($userList)) {
                    throw new \Exception('用户列表为空');
                }
                $userLists = [];
                foreach ($userList as $item) {
                    $userLists[] = $item['name'];
                }

                // 获取百度数据
                $baiduData = $this->getbdData();
                if (empty($baiduData)) {
                    throw new \Exception('未获取到原始百度数据');
                }
                $output->writeln(count($baiduData['res']) + count($baiduData['resDetail']) . ' 总百度原始数据');

                // 过滤百度数据
                $baiduDatas['pc'] = array_merge_recursive(
                    $baiduData['res'][0][0],
                    $baiduData['res'][0][1],
                    $baiduData['res'][0][2],
                    $baiduData['res'][0][3],
                    $baiduData['res'][0][4],
                    $baiduData['res'][0][5],
                    $baiduData['res'][0][6],
                    $baiduData['res'][0][7],
                    $baiduData['res'][0][8],
                    $baiduData['res'][0][9],
                    $baiduData['res'][0][10],
                    $baiduData['res'][0][11],
                    $baiduData['res'][0][12],
                    $baiduData['res'][0][13],
                );
                $baiduDatas['mobile'] = array_merge_recursive(
                    $baiduData['res'][1][0],
                    $baiduData['res'][1][1],
                    $baiduData['res'][1][2],
                    $baiduData['res'][1][3],
                    $baiduData['res'][1][4],
                    $baiduData['res'][1][5],
                    $baiduData['res'][1][6],
                    $baiduData['res'][1][7],
                    $baiduData['res'][1][8],
                    $baiduData['res'][1][9],
                    $baiduData['res'][1][10],
                    $baiduData['res'][1][11],
                    $baiduData['res'][1][12],
                    $baiduData['res'][1][13]
                );
                $baiduDatas['pc'] = array_values(array_filter($baiduDatas['pc'], function ($item) use ($userLists) {
                    list($campaignNameStatus, $click) = [$item['campaignNameStatus'], $item['click']];
                    preg_match('/^\(.*获.*\)(.*)(?:[已删除])?$/', $campaignNameStatus, $matchs);
                    if (empty($matchs)) {
                        return false;
                    }
                    if (0 == $click) {
                        return false;
                    }
                    $username = preg_replace('/(.*\(.*\)|\（.*\）)|\[已删除\]/', '', $campaignNameStatus);
                    if (!in_array($username, $userLists)) {
                        return false;
                    }
                    return true;
                }));
                $baiduDatas['mobile'] = array_values(array_filter($baiduDatas['mobile'], function ($item) use ($userLists) {
                    list($campaignNameStatus, $click) = [$item['campaignNameStatus'], $item['click']];
                    preg_match('/^\(.*获.*\)(.*)(?:[已删除])?$/', $campaignNameStatus, $matchs);
                    if (empty($matchs)) {
                        return false;
                    }
                    if (0 == $click) {
                        return false;
                    }
                    $username = preg_replace('/(.*\(.*\)|\（.*\）)|\[已删除\]/', '', $campaignNameStatus);
                    if (!in_array($username, $userLists)) {
                        return false;
                    }
                    return true;
                }));
                if (empty($baiduDatas['pc']) && empty($baiduDatas['mobile'])) {
                    throw new \Exception('未获取到过滤百度数据');
                }
                $this->baiduDatas = $baiduDatas;
                $baiduDeatilDatas['pc'] = array_merge_recursive(
                    $baiduData['resDetail'][0][0],
                    $baiduData['resDetail'][0][1],
                    $baiduData['resDetail'][0][2],
                    $baiduData['resDetail'][0][3],
                    $baiduData['resDetail'][0][4],
                    $baiduData['resDetail'][0][5],
                    $baiduData['resDetail'][0][6],
                    $baiduData['resDetail'][0][7],
                    $baiduData['resDetail'][0][8],
                    $baiduData['resDetail'][0][9],
                    $baiduData['resDetail'][0][10],
                    $baiduData['resDetail'][0][11],
                    $baiduData['resDetail'][0][12],
                    $baiduData['resDetail'][0][13]
                );
                $baiduDeatilDatas['mobile'] = array_merge_recursive(
                    $baiduData['resDetail'][1][0],
                    $baiduData['resDetail'][1][1],
                    $baiduData['resDetail'][1][2],
                    $baiduData['resDetail'][1][3],
                    $baiduData['resDetail'][1][4],
                    $baiduData['resDetail'][1][5],
                    $baiduData['resDetail'][1][6],
                    $baiduData['resDetail'][1][7],
                    $baiduData['resDetail'][1][8],
                    $baiduData['resDetail'][1][9],
                    $baiduData['resDetail'][1][10],
                    $baiduData['resDetail'][1][12],
                    $baiduData['resDetail'][1][12],
                    $baiduData['resDetail'][1][13]
                );
                $this->baiduDeatilDatas = $baiduDeatilDatas;

                $output->writeln(count($baiduDatas['pc']) + count($baiduDatas['mobile']) . ' 总原始数据');

                Db::startTrans();

                $insData = []; // 临时数据
                $insDatas = []; // 拆分数据
                $pc = function () use ($baiduDatas) {
                    foreach ($baiduDatas['pc'] as $item) {
                        yield $item;
                    }
                };
                $mobile = function () use ($baiduDatas) {
                    foreach ($baiduDatas['mobile'] as $item) {
                        yield $item;
                    }
                };
                foreach ($pc() as $item) {
                    // echo count($item) . " PC 待处理数据\n";
                    $insDataTmp = $this->lin($item); // 临时数据
                    if (empty($insDataTmp)) {
                        continue;
                    }
                    // echo count($insDataTmp) . " PC 临时数据\n";
                    $insData = array_merge_recursive($insData, $insDataTmp);
                    $insDatasTmp = $this->ti($insDataTmp[0]); //数据拆分
                    if (empty($insDatasTmp)) {
                        continue;
                    }
                    // echo count($insDatasTmp ?? []) . " PC 数据拆分\n----------\n";
                    $insDatas = array_merge_recursive($insDatas, $insDatasTmp); // 数据合并
                }
                foreach ($mobile() as $item) {
                    // echo count($item) . " WEB 待处理数据\n";
                    $insDataTmp = $this->lin($item); // 临时数据
                    if (empty($insDataTmp)) {
                        continue;
                    }
                    // echo count($insDataTmp) . " WEB 临时数据\n";
                    $insData = array_merge_recursive($insData, $insDataTmp);
                    $insDatasTmp = $this->ti($insDataTmp[0]); //数据拆分
                    if (empty($insDatasTmp)) {
                        continue;
                    }
                    // echo count($insDatasTmp ?? []) . " WEB 数据拆分\n----------\n";
                    $insDatas = array_merge_recursive($insDatas, $insDatasTmp); // 数据合并
                }
                echo count($insData) . " 总临时数据\n";
                echo count($insDatas) . " 总数据拆分\n";

                if (!empty($insDatas)) {
                    $res = (new FinanceFauxsumerismExpire())->saveAll($insDatas);
                    if (!$res) {
                        throw new \Exception('添加数据失败');
                    }
                }

                flock($fp, LOCK_UN);
                fclose($fp);

                Db::commit();

                $output->writeln('结束执行本次历关键词拆分任务');
                goto starts;
            } catch (\Throwable $t) {
                Db::rollback();
                $output->writeln('退出执行关键词拆分任务');
                $output->writeln($t->getMessage() . '------' . $t->getFile() . '--------' . $t->getLine());
                goto starts;
            }
        }
    }

    /** 获取百度数据 */
    protected function getbdData()
    {
        try {
            $url = 'https://api.baidu.com/json/sms/service/OpenApiReportService/getReportData';
            $headers = Config('bdAccount');
            $res = [];
            $resDetail = [];
            foreach ($headers as $header) {
                foreach ([0, 1] as $item) {
                    $this->request->host = $url;
                    $this->request->method = 'POST';
                    $body = [
                        'reportType' => 5381679,
                        'startDate' => $this->start_time,
                        'endDate' => $this->end_time,
                        'timeUnit' => 'DAY',
                        'columns' => [
                            'date',
                            'campaignId',
                            'campaignNameStatus',
                            'adGroupId',
                            'adGroupNameStatus',
                            'wInfoNameStatus',
                            'queryWord',
                            'landingPageUrl',
                            'device',
                            'click',
                            'cost',
                            'cpc',
                            'landings',
                            'landingRate',
                            'avgLandingPageDurationSec'
                        ],
                        'startRow' => 0,
                        'rowCount' => 1000,
                        'needSum' => true,
                        'filters' => [
                            [
                                'column' => 'device',
                                'operator' => 'EQ',
                                'values' => [
                                    $item
                                ],
                            ]
                        ]
                    ];
                    $tmpBdData = [];
                    while (true) {
                        $this->request->params = json_encode(compact('header', 'body'));
                        $tmpRes = $this->request->call();
                        if (0 != $tmpRes['header']['status'] || empty($tmpRes['body']['data'][0]['rows'])) {
                            break;
                        }
                        $tmpBdData = array_merge_recursive($tmpBdData, $tmpRes['body']['data'][0]['rows']);
                        $body['startRow'] += $body['rowCount'];
                    }
                    $res[$item][] = $tmpBdData ?? [];
                    $body = [
                        'reportType' => 4017932,
                        'startDate' => $this->start_time,
                        'endDate' => $this->end_time,
                        'timeUnit' => 'DAY',
                        'columns' => [
                            'dateTime',
                            'cityName',
                            'queryWord',
                            'wInfoNameStatus',
                            'landingPageUrl',
                            'ip',
                            'antiCode',
                            'landingPageDurationSec',
                            'device'
                        ],
                        'startRow' => 0,
                        'rowCount' => 1000,
                        'needSum' => true,
                        'filters' => [
                            [
                                'column' => 'device',
                                'operator' => 'EQ',
                                'values' => [
                                    $item
                                ],
                            ]
                        ]
                    ];
                    $tmpBdData = [];
                    while (true) {
                        $this->request->params = json_encode(compact('header', 'body'));
                        $tmpRes = $this->request->call();
                        if (0 != $tmpRes['header']['status'] || empty($tmpRes['body']['data'][0]['rows'])) {
                            break;
                        }
                        $tmpBdData = array_merge_recursive($tmpBdData, $tmpRes['body']['data'][0]['rows']);
                        $body['startRow'] += $body['rowCount'];
                    }
                    $resDetail[$item][] = $tmpBdData ?? [];
                }
            }
            return compact('res', 'resDetail');
        } catch (\Throwable $t) {
            return [];
        }
    }

    /** 临时整合数据 */
    protected function lin(array $bdItem)
    {
        // 未找到数据到回调
        $func = function (&$insData, $bdItem, $username, $uid) {
            // $baiduDetailInfo = $this->searchKeywordsInDetail($bdItem['device'], $bdItem['queryWord'], $this->strReplace($bdItem['landingPageUrl']));
            if (!empty($baiduDetailInfo)) {
                $ip = $baiduDetailInfo['ip'];
                $ipAddressInfo = $this->getIpInfo($ip);
                if (empty($ipAddressInfo[1]) || empty($ipAddressInfo[2])) {
                    $citys = $this->getAreaByCity($baiduDetailInfo['cityName']);
                    if (empty($citys)) {
                        goto citys;
                    }
                } else {
                    $citys = [$ipAddressInfo[1], $ipAddressInfo[2]];
                }
                $ip = [
                    'ip' => $baiduDetailInfo['ip'],
                    'operation' => $this->getIsp($ip)
                ];
            } else {
                citys: {
                $citys = $this->getArea($uid);
                if (2 != count($citys)) {
                    echo $username . ' 没有找到投放地区' . "\n";
                    return [];
                }
                $ip = $this->getIp($citys);
                }
            }
            $insData[] = [
                'uid' => $uid,
                'username' => $username,
                'money' => $bdItem['cpc'],
                'area' => $citys[0],
                'city' => $citys[1],
                'antistop' => $bdItem['queryWord'],
                'biaoantistop' => $bdItem['queryWord'],
                'status' => 1,
                'clicks' => $bdItem['click'],
                'pv' => $bdItem['landings'],
                'add_time' => strtotime($bdItem['date']),
                'ip' => $ip['ip'],
                'operation' => $ip['operation'],
                'consumer' => ['计算机' => 1, '移动设备' => 2][$bdItem['device']],
                'items' => $bdItem,
                'itemsDetails' => $baiduDetailInfo ?? [],
            ];
        };
        // 临时整合数据
        $insData = [];
        extract($bdItem);
        $username = preg_replace('/(.*\(.*\)|\（.*\）)|\[已删除\]/', '', $campaignNameStatus);
        $uid = Admin::where('name', $username)->where('del', 1)->value('id');
        if (empty($uid)) {
            echo $username . " 没有找到用户\n";
            return [];
        }
        $this->userIds[] = $uid;
        $func($insData, $bdItem, $username, $uid);
        return $insData;
    }

    /** 替换数据 */
    protected function ti(array $bdItem)
    {
        // 拆分替换数据
        $insDatas = [];

        $users = Admin::whereIn('id', $bdItem['uid'])->field('id, name, proportion')->where('del', 1)->with('user_plan')->select();
        $userIds = array_column($users, 'id');
        $usersArrs = array_combine($userIds, array_column($users, 'proportion')); // 用户扣费比例

        $tmpPlans = array_column($users, 'user_plan');
        $tmpPlansUid = array_column($tmpPlans, 'uid');

        $plans = array_combine(array_column($tmpPlans, 'uid'), array_column($tmpPlans, 'money'));
        if (count($plans) != count($userIds)) {
            $ts = array_diff($userIds, $tmpPlansUid);
            foreach ($ts as $bdItems) {
                $plans[$bdItems] = sprintf('%.2f', 0);
            }
            asort($plans);
        }
        $usersPlan = array_combine($userIds, $plans); // 用户消费限额

        $username = $bdItem['username'];
        $uid = $bdItem['uid'];
        $tmpItems = $bdItem['items'];
        $tmpItemsDetails = $bdItem['itemsDetails'];
        unset($bdItem['items'], $bdItem['itemsDetails']);

        $keywordsData = $replaceKeywords = GoodsShop::where('uid', $uid)
                ->where('is_audit', '=', 2)
                ->where('status', '=', 1)
                ->where('brand', '=', preg_replace('[已删除]', '', $tmpItems['adGroupNameStatus']))
                ->field('id, title')
                ->select();
        if (empty($replaceKeywords)) {
            $keywordsData = $replaceKeywords = GoodsShop::where('uid', $uid)
                    ->where('is_audit', '=', 2)
                    ->where('status', '=', 1)
                    ->field('id, title')
                    ->select();
        }
        if (empty($replaceKeywords)) {
            echo $username . ' 没有找到商品' . "\n";
            return;
        }

        $tclick = $bdItem['clicks'];
        for ($i = 0; $i < $tclick; $i++) {
            for ($j = 0; $j < 2; $j++) {
                $t = $bdItem;
                unset($t['username'], $t['second']);
                $t['clicks'] = 1;

                $tPrice = $t['money'];

                $goodsId = GoodsShop::where('id', $this->strReplace($tmpItems['landingPageUrl']))->limit(1)->value('id');
                $goods = $keywordsData[array_rand($keywordsData)];
                if (1 < $bdItem['money']) { // 大于 1
                    if (0 == $j) {
                        $t['money'] = sprintf('%.2f', $tPrice / 2 * $usersArrs[$uid] * 2 * 0.51 / 100);
                        $t['goods_id'] = (int)$goodsId;
                        if (0 != $i) {
                            goto replaces;
                        }
                    } else {
                        $t['money'] = sprintf('%.2f', $tPrice / 2 * $usersArrs[$uid] * 2 * 0.49 / 100);
                        $t['antistop'] = $goods['title'];
                        $t['goods_id'] = (int)$goods['id'];

                        replaces: {
                        $cityName = $this->getArea($uid);
                        if (2 != count($cityName)) {
                            echo $username . ' 没有找到投放地区' . "\n";
                            return [];
                        }
                        $t['area'] = $cityName[0];
                        $t['city'] = $cityName[1];
                        $ip = $this->getIp($cityName);
                        $t['ip'] = $ip['ip'];
                        $t['operation'] = $ip['operation'];
                        // $tmpConsumer = $this->getConsumer($uid);
                        // if (false == $tmpConsumer) {
                        //     echo $username . ' 存在不在计划内端口数据' . "\n";
                        //     return [];
                        // }
                        // $t['consumer'] = $tmpConsumer;
                        }
                    }
                } else { // 小于 1
                    $t['money'] = sprintf('%.2f', $tPrice * $usersArrs[$uid] / 100);
                    $t['goods_id'] = (int)$goodsId;
                    if (0 != $i) {
                        goto replaces;
                    }
                    $j++;
                }

                $t['pv'] = ($tKeyword = $this->isOver($t['antistop'], $uid)) ? $tKeyword + mt_rand(2, 5) : $this->randPow();
                $times = $this->randTime(($uid));
                if (false == $times) {
                    echo $username . ' 存在不在计划内时间数据' . "\n";
                    return [];
                }
                $t['add_time'] = $times;

                $insDatas[] = $t;
                $this->tmpNamePv[] = $t;
            }
        }
        return $insDatas;
    }

    protected function randPow()
    {
        static $mapStatic;
        $mapStatic ?? $mapStatic = 0;
        $maps = [
            [1, 9],
            [10, 50],
            [50, 90],
        ];
        $num = mt_rand($maps[$mapStatic][0], $maps[$mapStatic][1]);
        $mapStatic++;
        if (2 < $mapStatic) {
            $mapStatic = null;
        }
        return $num;
    }

    protected function isOver(string $name, int $uid)
    {
        $tmp = [];
        foreach ($this->tmpNamePv as $value) {
            if ($name == $value['antistop'] && $uid == $value['uid']) {
                $tmp[] = $value;
            }
        }
        if (empty($tmp)) {
            return false;
        }
        $res = array_column($tmp, 'pv');
        rsort($res);
        return array_shift($res);
    }

    protected function randTime(int $uid)
    {
        $userIds = array_values(array_unique($this->userIds));
        $res = GeneralizeOpportunist::whereIn('uid', $userIds)->select();
        $tmp = [];
        foreach ($res as $value) {
            $tuid = $value['uid'];
            if (!array_key_exists($tuid, $tmp)) {
                $tmp[$tuid] = $value;
            }
        }

        $func = function (int $times, int $planStartTime = 0, int $planEndTime = 0) {
            $times = mt_rand(strtotime(date("Y-m-d {$planStartTime}:00:00", $times)), strtotime(date("Y-m-d {$planEndTime}:00:00", $times)));
            return $times ?? false;
        };

        $systemTime = strtotime(date('Y-m-d 00:00:00'));
        // $inputTime = strtotime($this->start_time);
        // $times = strtotime(floor(($inputTime - $systemTime) / 3600 / 24) . ' day', $systemTime);
        $times = $systemTime;
        // 用户设置投放周
        $week = date('N', $times);
        $userPlanWeek = [];
        if (!empty($tmp[$uid]['week'])) {
            $userPlanWeek = explode(',', $tmp[$uid]['week'] ?? []);
            sort($userPlanWeek);
        }
        // 用户设置投放时间段
        $userPlanTime = [$tmp[$uid]['start_time'], $tmp[$uid]['end_time']];
        // 无投放计划
        //if (!in_array($week, $userPlanWeek)) {
            //// return $func($times);
            //return false;
        //}
        // 有投放计划
        $hour = date('H', $times);
        // 在投放计划时间内
        if (!empty($userPlanTime[1])) {
            return $func($times, $userPlanTime[0] ?? 0, $userPlanTime[1]);
        }
        // 不在投放时间内
        // return $func($times);
        return false;
    }

    public function getAreaByCity(string $city)
    {
        $pid = Area::where('shortname', $city)->value('pid');
        $pName = Area::where('id', $pid)->value('shortname');
        if (empty($pName)) {
            return [];
        }
        return [$pName, $city];
    }

    protected function getArea(int $uid) :array
    {
        $func = function (array &$tmp) use (&$func): array {
            if (empty($tmp)) {
                return [];
            }
            $randArea = array_rand($tmp);
            $areaName = $tmp[$randArea];
            $cityName = [];
            $cityName = $this->getAreas($areaName);
            if (empty($cityName)) {
                unset($tmp[$randArea]);
                return $func($tmp);
            }
            return $cityName;
        };

        $res = $this->isInArea($uid);

        return $func($res);
    }

    protected function getAreas(string $cityName = '', &$tmp = []) :array
    {
        try {
            $tmp[] = $cityName;

            $where = [];
            $where['level'] = ['=', 1];
            $where['shortname'] = ['=', $cityName];

            $areaInfo = Area::where($where)->field('id, pid, shortname')->find(); // 省级
            if (!empty($areaInfo)) { // 选择了全省
                $areaList = Area::where('pid', $areaInfo['id'])->field('id, pid, shortname')->select();
                if (empty($areaList)) {
                    $tmp[] = $cityName;
                } else {
                    $tmp[] = $areaList[array_rand($areaList)]['shortname'];
                }
            } else {
                $where['level'] = ['=', 2];
                $areaInfo = Area::where($where)->field('id, pid, shortname')->find(); // 市
                $tmp[] = $areaInfo->area_parent_data->shortname;
                krsort($tmp, SORT_NUMERIC);
                $tmp = array_values($tmp);
            }
            return $tmp;
        } catch (\Throwable $t) {
            return [];
        }
    }

    protected function isInArea(int $uid) :array
    {
        $res = GoodsShop::where('uid', $uid)
            ->where('is_audit', '=', 2)
            ->where('status', '=', 1)
            ->field('id, uid, province_id, city')
            ->find();

        $tmpProince = !empty($res['province_id']) ? Area::whereIn('id', $res['province_id'])->field('shortname')->select() : [];
        $province = !empty($tmpProince) ? array_column($tmpProince, 'shortname') : [];

        $tmpCity = !empty($res['city']) ? Area::whereIn('id', $res['city'])->field('shortname')->select() : [];
        $city = !empty($tmpCity) ? array_column($tmpCity, 'shortname') : [];

        $strUserGoodsArea = array_values(array_merge($province, $city));
        return $strUserGoodsArea ?? [];
    }

    protected function getIp(array $area)
    {
        try {
            $province = $area[0];
            $city = preg_replace('/市|地区/', '', $area[1]);

            $res = IpMarket::where('region', $province)->where('city', $city)->field('ip_start, ip_end, isp')->select();
            if (empty($res)) {
                $res = IpMarket::where('region', $province)->where('city', 'like', "{$city}%")->field('ip_start, ip_end, isp')->select();
            }
            if (empty($res)) {
                $res = IpMarket::where('region', 'like', "%{$province}%")->where('city', 'like', "{$city}%")->field('ip_start, ip_end, isp')->select();
            }
            if (empty($res)) {
                $res = IpMarket::where('region', $province)->field('ip_start, ip_end, isp')->select();
            }
            if (empty($res)) {
                $res = IpMarket::where('region', 'like', "%{$province}%")->field('ip_start, ip_end, isp')->select();
            }
            $ips = $res[array_rand($res)];

            $ip_start = explode('.', $ips['ip_start']);
            $ip_end = explode('.', $ips['ip_end']);
            $ipOne = $ip_start[0] < $ip_end[0] ? mt_rand($ip_start[0], $ip_end[0]) : mt_rand($ip_end[0], $ip_start[0]);
            $ipTwo = $ip_start[1] < $ip_end[1] ? mt_rand($ip_start[1], $ip_end[1]) : mt_rand($ip_end[1], $ip_start[1]);
            $ipThree = $ip_start[2] < $ip_end[2] ? mt_rand($ip_start[2], $ip_end[2]) : mt_rand($ip_end[2], $ip_start[2]);
            $ipFour = $ip_start[3] < $ip_end[3] ? mt_rand($ip_start[3], $ip_end[3]) : mt_rand($ip_end[3], $ip_start[3]);
            $ip = $ipOne . '.' . $ipTwo . '.' . $ipThree . '.' . $ipFour;
            $operation = $ips['isp'] ?? $this->getIsp($ip);

            if (empty($ip)) {
                throw new \Exception();
            }
        } catch (\Throwable $t) {
            echo $province . $city . ' 没有找到地区IP范围' . "\n";
            $ip = '';
            $operation = '';
        }
        return compact('ip', 'operation');
    }

    public function getConsumer(int $uid)
    {
        $port = GeneralizeOpportunist::where('uid', $uid)->value('fenduan');
        if (empty($port)) {
            return false;
        }
        // $portItem = [1 => 'PC', 2 => 'WEB'];
        $port = explode(',', $port);
        return $port[array_rand($port)];
    }

    public function getIsp(string $ip)
    {
        try {
            $url = 'http://api.map.baidu.com/location/ip?ak=1QbeTXxNK4q1NM6HH04RmxvQs2UlISGp&ip=%s';
            $map = [
                'CHINANET' => '中国电信',
                'UNICOM' => '中国联通',
                'CMNET' => '中国移动',
                'CERNET' => '教育网',
                'BJENET' => '北京教育信息网',
                'WASU' => '华数宽带',
                'COLNET' => '东方有线',
                'FOUNDERBN' => '方正宽带',
                'TOPWAY-NET' => '天威视讯',
                'DXTNET' => '二级接入商',
                'OTHER' => '其他'
            ];
            $this->request->host = sprintf($url, $ip);
            $this->request->method = 'GET';
            $ipInfo = $this->request->call();
            if (!isset($ipInfo['address'])) {
                $carrier = $map['OTHER'];
            } else {
                $yun = explode('|', $ipInfo['address']);
                $carrier = $map[$yun[4]] ?? $map['OTHER'];
            }
            return $carrier;
        } catch (\Throwable $t) {
            return '';
        }
    }

    public function getIpInfo(string $ip)
    {
        try {
            $url = 'http://api.map.baidu.com/location/ip?ak=1QbeTXxNK4q1NM6HH04RmxvQs2UlISGp&ip=%s';
            $this->request->host = sprintf($url, $ip);
            $this->request->method = 'GET';
            $i = 0;
            while (true) {
                $ipInfo = $this->request->call();
                if (!empty($ipInfo['address'])) {
                    break;
                }
                if (3 <= $i) {
                    break;
                }
                // sleep(1);
                $i++;
            }
            $addressInfo = explode('|', $ipInfo['address'] ?? '');
            return $addressInfo;
        } catch (\Throwable $t) {
            return '';
        }
    }

    private function searchKeywordsInDetail(string $port, string $queryWord, $goodsId)
    {
        $ports = $this->portMap($port);
        $func = function () use ($ports) {
            foreach ($this->baiduDeatilDatas[$ports] as $item) {
                yield $item;
            }
        };
        $search = [];
        foreach ($func() as $item) {
            if ($queryWord == $item['queryWord'] && $goodsId == $this->strReplace($item['landingPageUrl'])) {
                $search[] = $item;
                // $search = $item;
                // break;
            }
        }
        // $tmp = $search;
        if (empty($search)) {
            return [];
        }
        foreach ($search as $key => $value) {
            if ($this->redis->sismember($this->redisDetailKey, $value['dateTime']) &&
                $this->redis->sismember($this->redisDetailKey, $value['ip'])) {
                unset($search[$key]);
            }
        }
        if (empty($search)) {
            return [];
        }
        $searchInfo = $search[array_rand($search)];
        $this->redis->sadd($this->redisDetailKey, $searchInfo['dateTime']);
        $this->redis->sadd($this->redisDetailKey, $searchInfo['ip']);
        return $searchInfo;
        // return $search;
    }

    private function portMap(string $port)
    {
        return ['计算机' => 'pc', '移动设备' => 'mobile'][$port];
    }

    private function strReplace(string $str)
    {
        $goodsId = preg_replace('/^(?:.*)\/(\d.*)(?>\/)$/', '\\1', $str);
        if (!is_numeric($goodsId)) {
            $goodsId = preg_replace('/^.*\/goods_(\d*)(?:\.html)?$/', '\\1', $str);
        }
        if (!is_numeric($goodsId)) {
            $goodsId = 0;
        }
        return $goodsId;
    }
}
