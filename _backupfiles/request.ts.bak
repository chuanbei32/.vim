import axios ,{AxiosRequestConfig}from "axios";
import { Toast } from "vant";
import * as CryptoJS from 'crypto-js';
export function request(config: AxiosRequestConfig) {
  // 1.创建axios的实例
  const instance = axios.create({
    baseURL: process.env.VUE_APP_baseURL ? process.env.VUE_APP_baseURL : "api/",
    timeout: 8000,
  });

  // 2.axios的拦截器
  // 2.1.请求拦截的作用
  instance.interceptors.request.use(
    (config) => {
      let timestamp = new Date().getTime()
      let platform = 'iOS'
      let aesKey = timestamp + platform
      let headers = {
        'x-mflix-ts': timestamp,
        'x-mflix-deviceId': platform,
        'x-mflix-platform': platform,
        'Content-Type': 'application/plain'
      }
      config.headers = headers

      function encrypt(word: string, keyStr: string){
          let key  = CryptoJS.enc.Utf8.parse(keyStr);
          let srcs = CryptoJS.enc.Utf8.parse(JSON.stringify(word));
          let encrypted = CryptoJS.AES.encrypt(srcs, key, {iv: key, mode:CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7});
          return encrypted.toString();
      }
      let aesData = encrypt(config.params, aesKey)
      config.data = aesData
      return config;
    },
    (err) => {
      console.log(err);
    }
  );
  Toast.loading({
    message: "加载中...",
    forbidClick: true,
    loadingType: "spinner",
  });
  // 2.2.响应拦截
  instance.interceptors.response.use(
    (res) => {
      Toast.clear();

      let text = res.data
      let aesKey = text.slice(-16)
      let aesWord = text.slice(0, text.length - 16)
      let jsonData = decrypt(aesWord, aesKey);
  function decrypt(word: string, keyStr: string){
      const key = CryptoJS.enc.Utf8.parse(keyStr); 
          const iv = CryptoJS.enc.Utf8.parse(keyStr); 
              let decrypt = CryptoJS.AES.decrypt(word, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
                  let decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);
                      return decryptedStr.toString();
}
      return JSON.parse(jsonData);
    },
    (err) => {
      console.log(err);
    }
  );

  // 3.发送真正的网络请求
  return instance(config);
}
