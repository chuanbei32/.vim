<?php

namespace app\api\controller;

use \think\Db;
use think\Env;
use think\Request;
use think\Controller;
use think\captcha\Captcha;
use app\api\model\GoodsShop;
use app\api\model\NoKeywords;
use app\api\model\NoKeywordsUse;
use app\api\model\Admin as adminmodel;

class Admininfo extends Base
{
    public function is_plan()
    {
        $data = request()->param();
        if (!isset($data['uid'])) {
            return json(['status' => 2, 'msg' => '参数错误']);
        }
        $list = Db('admin')->where('id', $data['uid'])->value('is_plan');
        $cpcPlanName = Db('addcampaign')->where('uid', $data['uid'])->value('cpcPlanName');
        return json(['status' => 1, 'msg' => '操作成功', 'data' => $list, 'cpcPlanName' => $cpcPlanName]);
    }

    public function title()
    {
        $data = request()->param();
        if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i", $data['url'])) {
            return json(['status' => 2, 'msg' => '格式错误', 'data' => '']);
        }
        Db('admin')->where('id', $data['uid'])->update(['oemurl' => $data['url'], 'oemtitle' => $data['title']]);
        return json(['status' => 1, 'msg' => '操作成功', 'data' => '']);
    }

    public function admin()
    {
        $token = request()->param();

        if (!isset($token['state'])) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }

        $index = new adminmodel();
        $where = [];
        if (isset($token['name']) && !empty($token['name'])) {
            $where['name'] = ['like', '%' . $token['name'] . '%'];
        }
        if (isset($token['mobile']) and $token['mobile'] > 0) {
            $where['mobile'] = ['like', '%' . $token['mobile'] . '%'];
        }
        if (isset($token['group']) && $token['group']) {
            $groupId = db('admin')->where('name', 'like', "%{$token['group']}%")->value('id');
            if ($groupId) {
                $where['pid'] = $groupId;
            }
        }
        $field = 'off_time,pid,id,name,mobile,admin_cate_id,company_name,money,number,balance,add_time,login_time,status,kefuid,proportion,oemtitle,oemurl,is_plan,sqC,quan_name';
        $adminInfo = Db('admin')->where('id', $token['id'])->value('admin_cate_id');
        if ($adminInfo == 1 || $adminInfo == 6) {
            if ($token['state'] == 1) {
                $count = $index
                    ->where($where)
                    ->where('del', 1)
                    ->where('admin_cate_id', 2)
                    ->count();
                $list = $index
                    ->field($field)
                    ->where($where)
                    ->where('del', 1)
                    ->where('admin_cate_id', 2)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
            }
            if ($token['state'] == 2) {
                $list = Db('admin')
                    ->field($field)
                    ->where($where)
                    ->where('admin_cate_id', 3)
                    ->where('del', 1)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = Db('admin')
                    ->where($where)
                    ->where('admin_cate_id', 3)
                    ->where('del', 1)
                    ->count();
            }
            if ($token['state'] == 3) {
                $list = Db('admin')
                    ->field($field)
                    ->where($where)
                    ->where('admin_cate_id', 4)
                    ->where('del', 1)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = Db('admin')
                    ->where($where)
                    ->where('admin_cate_id', 4)
                    ->where('del', 1)
                    ->count();
            }
            if ($token['state'] == 4) {
                $list = $index
                    ->field($field)
                    ->where($where)
                    ->where('pid', $token['id'])
                    ->where('admin_cate_id', 6)
                    ->where('del', 1)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = $index
                    ->where($where)
                    ->where('pid', $token['id'])
                    ->where('admin_cate_id', 6)
                    ->where('del', 1)
                    ->count();
            }
        }
        if ($adminInfo == 2) {
            if ($token['state'] == 2) {
                $list = Db('admin')
                    ->field($field)
                    ->where($where)
                    ->where('admin_cate_id', 3)
                    ->where('del', 1)
                    ->where('pid', $token['id'])
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = Db('admin')
                    ->where($where)
                    ->where('admin_cate_id', 3)
                    ->where('del', 1)
                    ->where('pid', $token['id'])
                    ->count();
            }
            if ($token['state'] == 3) {
                $putong = Db('admin')->field('id')->where('admin_cate_id', 3)->where('del', 1)->where('pid', $token['id'])->select();
                $putongId = array_column($putong, 'id');
                $list = Db('admin')
                    ->field($field)
                    ->where($where)
                    ->where('admin_cate_id', 4)
                    ->where('del', 1)
                    ->where('pid', 'in', $putongId)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = Db('admin')
                    ->where($where)
                    ->where('admin_cate_id', 4)
                    ->where('del', 1)
                    ->where('pid', 'in', $putongId)
                    ->count();
            }
            if ($token['state'] == 4) {
                $putong = Db('admin')->field('id')->where('admin_cate_id', 3)->where('del', 1)->where('pid', $token['id'])->select();
                $putongId = array_column($putong, 'id');
                $list = $index
                    ->field($field)
                    ->where($where)
                    ->where('pid', 'in', $putongId)
                    ->where('admin_cate_id', 5)
                    ->where('del', 1)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();

                $count = $index
                    ->where($where)
                    ->where('pid', 'in', $putongId)
                    ->where('admin_cate_id', 5)
                    ->where('del', 1)
                    ->count();
            }
        }
        if ($adminInfo == 3) {
            if ($token['state'] == 3) {
                $list = Db('admin')
                    ->field($field)
                    ->where($where)
                    ->where('admin_cate_id', 4)
                    ->where('del', 1)
                    ->where('pid', $token['id'])
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = Db('admin')
                    ->where($where)
                    ->where('admin_cate_id', 4)
                    ->where('del', 1)
                    ->where('pid', $token['id'])
                    ->count();
            }
            if ($token['state'] == 4) {
                $list = $index
                    ->field($field)
                    ->where($where)
                    ->where('pid', $token['id'])
                    ->where('admin_cate_id', 5)
                    ->where('del', 1)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = $index
                    ->where($where)
                    ->where('pid', $token['id'])
                    ->where('admin_cate_id', 5)
                    ->where('del', 1)
                    ->count();
            }
        }
        if ($adminInfo == 5) {
            if ($token['state'] == 3) {
                $list = $index
                    ->field($field)
                    ->where($where)
                    ->where('kefuid', $token['id'])
                    ->where('del', 1)
                    ->order('id desc')
                    ->limit(($token['num'] * $token['p'] - $token['num']), $token['num'])
                    ->select();
                $count = $index
                    ->where($where)
                    ->where('kefuid', $token['id'])
                    ->where('del', 1)
                    ->count();
            }
        }
        $beginToday = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
        $endToday = mktime(0, 0, 0, date('m'), date('d') + 1, date('Y')) - 1;
        foreach ($list as $k => $v) {
            $list[$k]['num'] = Db('admin')->where('kefuid', $v['id'])->where('del', 1)->count();
            $list[$k]['fenpeiId'] = Db('admin')->field('id')->where('kefuid', $v['id'])->where('del', 1)->select();
            $list[$k]['fenpeiId'] = array_column($list[$k]['fenpeiId'], 'id');
            $list[$k]['kefuid'] = Db('admin')->where('id', $v['kefuid'])->where('del', 1)->value('name');
            $list[$k]['number'] = Db('admin')->where('pid', $v['id'])->where('del', 1)->where('admin_cate_id', 'neq', 5)->count();
            if ($v['admin_cate_id'] == 4) {
                $list[$k]['goodssho'] = Db('goods_shop')->where('status', 1)->where('uid', $v['id'])->count();
                $iidd = $v['id'];
            }
            if ($v['admin_cate_id'] == 3) {
                $infoadminid = Db('admin')->where('del', 1)->where('pid', $v['id'])->select();
                $ids = array_column($infoadminid, 'id');
                $list[$k]['goodssho'] = Db('goods_shop')->where('status', 1)->where('uid', 'in', $ids)->count();
                $iidd = $ids;
            }
            if ($v['admin_cate_id'] == 2) {
                $infoadminid = Db('admin')->where('del', 1)->where('pid', $v['id'])->select();
                $ids = array_column($infoadminid, 'id');
                $infoadminlist = Db('admin')->where('del', 1)->where('pid', 'in', $ids)->select();
                $idss = array_column($infoadminlist, 'id');
                $list[$k]['goodssho'] = Db('goods_shop')->where('status', 1)->where('uid', 'in', $idss)->count();
                $iidd = $idss;
            }
            $list[$k]['admin_cate_id'] = Db('admin')->where('id', $v['pid'])->value('name');
            $listAdmin = Db('admin')->where('id', $v['id'])->find();
            if ($listAdmin['admin_cate_id'] == 5 || $listAdmin['admin_cate_id'] == 6) {
                $kefuadmin = Db('admin')->where('del', 1)->where('kefuid', $v['id'])->select();
                $xufeinum = 0;
                $xufeisun = 0;
                $iid = [];
                if ($kefuadmin) {
                    foreach ($kefuadmin as $ka => $va) {
                        $iid[] = $va['id'];
                        if ($va['is_xufei'] == 1) {
                            $xufeinum++;
                        } else {
                            $xufeisun++;
                        }
                    }
                    $xufei = $xufeinum + $xufeisun;
                    $list[$k]['xufei'] = $xufeisun / $xufei * 100 . '%';
                } else {
                    $list[$k]['xufei'] = '0%';
                }
                $iidd = $iid;
            }
            $list[$k]['sum'] = (float)Db('finance_fauxsumerism')
                ->where('uid', 'in', $iidd)
                ->where('add_time', '>=', $beginToday)
                ->where('add_time', '<', $endToday)
                ->where('status', 1)
                ->sum('money');
            $beginYesterday = mktime(0, 0, 0, date('m'), date('d') - 1, date('Y'));
            $endYesterday = mktime(0, 0, 0, date('m'), date('d'), date('Y')) - 1;
            $list[$k]['yesterday'] = (float)Db('finance_fauxsumerism')
                ->where('uid', 'in', $iidd)
                ->where('add_time', '>=', $beginYesterday)
                ->where('add_time', '<', $endYesterday)
                ->where('status', 1)
                ->sum('money');
            $now = time();
            $end = strtotime('+1 month');
            $yue_star = mktime(0, 0, 0, date('m', $now), 1, date('Y', $now));//当前月开始时间
            $yue_end = mktime(0, 0, 0, date('m', $end), 1, date('Y', $end)) - 1;//当前月结束时间
            $list[$k]['thisMonth'] = Db('finance_fauxsumerism')
                ->where('uid', 'in', $iidd)
                ->where('add_time', '>=', $yue_star)
                ->where('add_time', '<', $now)
                ->where('status', 1)
                ->sum('money');
            $begin_time = date('Y-m-01 00:00:00', strtotime('-1 month'));
            $end_time = date('Y-m-d 23:59:59', strtotime(-date('d') . 'day'));
            $list[$k]['lastMonth'] = Db('finance_fauxsumerism')
                ->where('uid', 'in', $iidd)
                ->where('add_time', '>=', $begin_time)
                ->where('add_time', '<', $end_time)
                ->where('status', 1)
                ->sum('money');
            $list[$k]['add_time'] = date('Y/m/d', $v['add_time']);
            $list[$k]['login_time'] = date('Y/m/d', $v['login_time']);

            $list[$k]['balance'] = (float)$v['balance'];
            $list[$k]['money'] = (float)$v['money'];
        }
        if ($list) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $list, 'count' => $count, ]);
        } else {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $list]);
        }
    }

    public function recharge()
    {
        $id = request()->param();
        $special = Db('admin')->where('id', $id['id'])->where('pid', 545)->find();
        if (!empty($special) && $id['money'] < 3000) {
            return json(['status' => 2, 'msg' => '充值金额必须大于 3000', 'data' => '']);
        }
        if (!isset($id['id'])) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        if (isset($id['money'])) {
            $money = Db('admin')->where('id', $id['uid'])->find();
            $admin = Db('admin')->where('id', $id['id'])->find();
            if ($money['pid'] == 0) {
                Db::startTrans();
                try {
                    $mone = Db('admin')->where('id', $id['id'])->setInc('balance', $id['money']);
                    $money = Db('admin')->where('id', $id['id'])->setInc('money', $id['money']);
                    $name = Db('admin')->where('id', $id['id'])->value('balance');
                    $chongzhi = Db('recharge')->insert(['remark' => $id['remark'], 'money' => $id['money'], 'add_time' => time(), 'uid' => $id['id'], 'pid' => $id['uid']]);
                    if ($admin['is_xufei'] == 2) {
                        Db('expenditure')->insert(['uid' => $id['id'], 'pid' => $id['uid'], 'add_time' => time(), 'money' => $id['money'], 'kefu_id' => $admin['kefuid']]);
                    } else {
                        Db('admin')->where('id', $id['id'])->setField('is_xufei', 2);
                    }
                    if ($chongzhi) {
                        Db::commit();
                        return json(['status' => 1, 'msg' => '操作成功', 'data' => $name]);
                    } else {
                        Db::rollback();
                        return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
                    }
                } catch (\Exception $e) {
                    Db::rollback();
                    return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
                }
            } else {
                if ($id['money'] >= 0) {
                    if ($money['balance'] >= $id['money']) {
                        Db::startTrans();
                        try {
                            $mone = Db('admin')->where('id', $id['id'])->setInc('balance', $id['money']);
                            $money = Db('admin')->where('id', $id['id'])->setInc('money', $id['money']);
                            $uidmoney = Db('admin')->where('id', $id['uid'])->setDec('balance', $id['money']);
                            $name = Db('admin')->where('id', $id['id'])->value('balance');
                            $chongzhi = Db('recharge')->insert(['money' => $id['money'], 'remark' => $id['remark'], 'add_time' => time(), 'uid' => $id['id'], 'pid' => $id['uid']]);
                            if ($admin['is_xufei'] == 2) {
                                Db('expenditure')->insert(['uid' => $id['id'], 'pid' => $id['uid'], 'add_time' => time(), 'money' => $id['money'], 'kefu_id' => $admin['kefuid']]);
                            } else {
                                Db('admin')->where('id', $id['id'])->setField('is_xufei', 2);
                            }
                            if ($chongzhi) {
                                Db::commit();
                                return json(['status' => 1, 'msg' => '操作成功', 'data' => $name]);
                            } else {
                                Db::rollback();
                                return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
                            }
                        } catch (\Exception $e) {
                            Db::rollback();
                            return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
                        }
                    } else {
                        return json(['status' => 2, 'msg' => '您的账户余额不足无法给该用户充值', 'data' => '']);
                    }
                } else {
                    return json(['status' => 2, 'msg' => '充值金额不能小于零', 'data' => '']);
                }
            }
        } else {
            $money = Db('admin')->field('balance')->where('id', $id['id'])->find();
            if ($money) {
                return json(['status' => 1, 'msg' => '操作成功', 'data' => $money]);
            } else {
                return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
            }
        }
    }

    /**
     * curl 请求
     * @param string $url 请求地址
     * @param array $param 请求参数
     * @param bool $param 请求参数
     * @param bool $post 请求方式
     * @return void
     */
    private function curl_request($url, $post = false, $param = [], $https = false)
    {
        //curl_init 初始化
        $ch = curl_init($url);
        //curl_setopt 设置一些请求选项
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); //数据流不直接输出
        // if ($post) {
        //设置请求方式和请求参数
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $param);
        // }
        // https请求，默认会进行验证
        if ($https) {
            //禁止从服务器端 验证客户端的证书
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        }
        //curl_exec 执行请求会话（发送请求）
        $res = curl_exec($ch);
        //curl_close 关闭请求会话
        curl_close($ch);
        return $res;
    }

    public function subordinate()
    {
        $id = request()->param();
        if ($id['id']) {
            $list = Db('admin')
                ->field('admin_cate_id,id,name,mobile,company_name,number,balance,add_time,login_time,status')
                ->where('pid', $id['id'])
                ->where('del', 1)
                ->where('admin_cate_id', 'neq', 5)
                ->select();
            $beginToday = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
            $endToday = mktime(0, 0, 0, date('m'), date('d') + 1, date('Y')) - 1;
            foreach ($list as $k => $v) {
                if ($v['admin_cate_id'] == 1) {
                    $list[$k]['admin_cate_id'] = '超级管理员';
                }
                if ($v['admin_cate_id'] == 2) {
                    $list[$k]['admin_cate_id'] = '核心代理商';
                }
                if ($v['admin_cate_id'] == 3) {
                    $list[$k]['admin_cate_id'] = '普通代理商';
                }
                if ($v['admin_cate_id'] == 4) {
                    $list[$k]['admin_cate_id'] = '终端用户';
                }
                $list[$k]['sum'] = Db('finance_fauxsumerism')
                    ->where('uid', $v['id'])
                    ->where('add_time', '>=', $beginToday)
                    ->where('add_time', '<', $endToday)
                    ->sum('money');
                $list[$k]['add_time'] = date('Y-m-d', $v['add_time']);
                $list[$k]['login_time'] = date('Y-m-d', $v['login_time']);
            }
            if ($list) {
                return json(['status' => 1, 'msg' => '操作成功', 'data' => $list]);
            } else {
                return json(['status' => 2, 'msg' => '暂无下级', 'data' => '']);
            }
        } else {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
    }

    public function edit()
    {
        $id = request()->param('id');
        $index = new adminmodel();
        $list = $index->field('name,mobile,company_name,status')->where('id', $id)->find();
        if ($list) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $list]);
        } else {
            return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
        }
    }

    public function addInfo()
    {
        $data = request()->param();
        if (isset($data['id'])) {
            $name = Db('admin')->where('id', $data['id'])->value('name');
            if ($name != $data['name']) {
                return json(['status' => 2, 'msg' => '用户名不可修改']);
            }
            if (!(empty($data['password']) && empty($data['password1']))) {
                if ($data['password'] != $data['password1']) {
                    return json(['status' => 2, 'msg' => '两次密码不一致', 'data' => '']);
                }
                $data['password'] = md5($data['password']);
                Db('jhadmin')->where('name', $name)->update(['password' => $data['password']]);
                unset($data['password1']);
            } else {
                unset($data['password'], $data['password1']);
            }
            if (isset($data['mobile'])) {
                if (!preg_match("/^1[3456789]{1}\d{9}$/", $data['mobile'])) {
                    return json(['status' => 2, 'msg' => '手机号格式不正确', 'data' => '']);
                }
            }
            unset($data['uid'], $data['state']);

            $index = new adminmodel();
            $list = $index->where('id', $data['id'])->update($data);
            $admininfoa = Db('admin')->where('id', $data['id'])->find();
            if ($admininfoa['admin_cate_id'] == 2) {
                $admininfophon = Db('admin')->where('pid', $admininfoa['id'])->where('admin_cate_id', 3)->where('del', 1)->select();
                $idd = array_column($admininfophon, 'id');
                $admininfotwo = Db('admin')->where('pid', 'in', $idd)->where('del', 1)->where('admin_cate_id', 4)->select();
                $idds = array_column($admininfotwo, 'id');
                $array = array_merge($idd, $idds);
                Db('admin')->where('id', 'in', $array)->update(['proportion' => $data['proportion']]);
            }
            if ($admininfoa['admin_cate_id'] == 3) {
                $admininfophon = Db('admin')->where('pid', $admininfoa['id'])->where('admin_cate_id', 4)->where('del', 1)->select();
                $idd = array_column($admininfophon, 'id');
                Db('admin')->where('id', 'in', $idd)->update(['proportion' => $data['proportion']]);
            }
            return json(['status' => 1, 'msg' => '操作成功', 'data' => '']);
        } else {
            if (!(isset($data['state']))) {
                return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
            }
            if (!isset($data['name']) || empty($data['name'])) {
                return json(['status' => 2, 'msg' => '用户名不能为空', 'data' => '']);
            }
            if (empty($data['password']) || empty($data['password1'])) {
                return json(['status' => 2, 'msg' => '密码不能为空', 'data' => '']);
            }
            if ($data['password'] != $data['password1']) {
                return json(['status' => 2, 'msg' => '两次密码不一致', 'data' => '']);
            }
            unset($data['password1']);
            if (!preg_match("/^1[3456789]{1}\d{9}$/", $data['mobile'])) {
                return json(['status' => 2, 'msg' => '手机号格式不正确', 'data' => '']);
            }
            $name = Db('admin')->where('name', $data['name'])->where('del', 1)->find();
            if ($name) {
                return json(['status' => 2, 'msg' => '该名称已存在', 'data' => '']);
            }
            if (empty($data['proportion'])) {
                $data['proportion'] = Db('admin')->where('id', $data['uid'])->value('proportion');
            }
            $data['add_time'] = time();
            $data['password'] = md5($data['password']);
            $data['pid'] = $data['uid'];
            if ($data['state'] == 1) {
                $data['admin_cate_id'] = 2;
            }
            if ($data['state'] == 2) {
                $data['admin_cate_id'] = 3;
            }
            if ($data['state'] == 3) {
                $data['admin_cate_id'] = 4;
            }
            if ($data['state'] == 4) {
                $data['admin_cate_id'] = 5;
            }
            if ($data['state'] == 6) {
                $data['admin_cate_id'] = 6;
            }
            unset($data['uid'], $data['state']);

            $index = new adminmodel();
            $list = $index->insertGetId($data);
            $data['proportion'] = 50;
            if ($list) {
                $week = ['1,2,3,4,5,6,7'];
                Db('generalize_opportunist')->insert(['week' => $week, 'money' => 0, 'fenduan' => 1, 'uid' => $list]);
                Db('generalize_brief')->insert(['uid' => $list]);
                return json(['status' => 1, 'msg' => '操作成功', 'data' => '']);
            } else {
                return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
            }
        }
    }

    public function allocation()
    {
        $data = request()->param();
        if (!isset($data['uid'])) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $where = '';
        if (isset($data['name']) and $data['name'] != '') {
            $where['name'] = ['like', '%' . $data['name'] . '%'];
        }
        $list = Db('admin')->field('id,name')->where($where)->where('pid', $data['uid'])->where('admin_cate_id', 'neq', 5)->where('del', 1)->select();
        if ($list) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $list]);
        } else {
            return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
        }
    }

    public function download()
    {
        $data = request()->param();
        $id = $data['id'];
        if (!isset($data['id'])) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $data = db('goods_shop')->where('uid', $data['id'])->where('status', 1)->select();
        foreach ($data as $k => $v) {
            $data[$k]['is_audit'] = $v['is_audit'] == 1 ? '未审核' : '已审核';
        }
        $name = db('admin')->where('id', $id)->value('name');
        ini_set('memory_limit', '1024M');
        vendor('phpexcel.Classes.PHPExcel');
        header('content-type:text/html;charset=utf8');
        $objExcel = new \PHPExcel();
        $objSheet = $objExcel->getActiveSheet();
        $objExcel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
        $objExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objSheet->setTitle('商品导出');
        $objSheet->setCellValue('A1', 'ID')
            ->setCellValue('B1', '名称')
            ->setCellValue('C1', '状态');
        $j = 2;
        foreach ($data as $k => $v) {
            $objSheet->setCellValue('A' . $j, $v['id'])
                ->setCellValue('B' . $j, $v['title'])
                ->setCellValue('C' . $j, $v['is_audit']);
            $j++;
        }
        $file_name = $name . '-商品名称查询' . '.xlsx';
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header("Content-Disposition: attachment;filename=$file_name");
        header('Cache-Control: max-age=0');
        $objWriter = \PHPExcel_IOFactory::createWriter($objExcel, 'Excel2007');
        $objWriter->save('php://output');
        exit;
    }

    public function allocationPost()
    {
        $data = request()->param();
        if (!(isset($data['id'])) && isset($data['pid'])) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        Db('admin')->where('kefuid', $data['id'])->update(['kefuid' => '']);
        $list = Db('admin')->where('id', 'in', $data['pid'])->update(['kefuid' => $data['id']]);
        if ($list) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => '']);
        } else {
            return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
        }
    }

    public function del()
    {
        $data = request()->param();
        $list = Db('admin')->where('pid', $data['id'])->where('del', 1)->where('status', 1)->find();
        if (!empty($list)) {
            return json(['status' => 2, 'msg' => '存在下级用户不可删除']);
        }
        $admin = new adminmodel();
        $data = $admin->where('id', $data['id'])->update(['del' => 2]);
        if ($data) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => '']);
        } else {
            return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
        }
    }

    public function onclick()
    {
        $data = request()->param();
        if (!isset($data['id'])) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        if ($data['status'] == 2) {
            $admin = Db('admin')->where('id', $data['id'])->find();
            $iddd[] = $data['id'];
            if ($admin['admin_cate_id'] == 2) {
                $adminone = Db('admin')->where('pid', $data['id'])->select();
                $idd = array_column($adminone, 'id');
                $admintwo = Db('admin')->where('pid', 'in', $idd)->select();
                $array = array_column($admintwo, 'id');
                // $list = Db('goods_shop')->where('uid','in',$array)->select();
                // foreach ($list as $k => $v){
                //     if(!empty($v['xml'])){
                //         @unlink('.' . $v['xml']);
                //     }
                // }
                // Db('goods_shop')->where('uid','in',$array)->update(['is_audit'=>1,'is_xml'=>1,'is_indexes'=>1,'xml'=>'','indexes'=>'','xml_time'=>'']);
                // foreach($array as $k => $v){
                //     $listone = floor(($v-1)/1000);
                //     $path = '/xml' ."/indexes" . $listone . ".xml";
                //     if(file_exists('.' . $path)){
                //         @unlink('.' . $path);
                //     }
                //     $startID =floor(($v - 1)/1000) * 1000 + 1;
                //     $endID =floor(($v - 1)/1000) * 1000 + 1000;
                //     $ids = $startID . '-' . $endID;
                //     $this->shopIds($ids);
                // }
                $array = array_merge($idd, $array, $iddd);
            }
            if ($admin['admin_cate_id'] == 3) {
                $admintwo = Db('admin')->where('pid', $data['id'])->select();
                $array = array_column($admintwo, 'id');
                // $list = Db('goods_shop')->where('uid','in',$array)->select();
                // foreach ($list as $k => $v){
                //     if(!empty($v['xml'])){
                //         @unlink('.' . $v['xml']);
                //     }
                // }
                // Db('goods_shop')->where('uid','in',$array)->update(['is_audit'=>1,'is_xml'=>1,'is_indexes'=>1,'xml'=>'','indexes'=>'','xml_time'=>'']);
                // foreach($array as $k => $v){
                //     $listone = floor(($v-1)/1000);
                //     $path = '/xml' ."/indexes" . $listone . ".xml";
                //     if(file_exists('.' . $path)){
                //         @unlink('.' . $path);
                //     }
                //     $startID =floor(($v - 1)/1000) * 1000 + 1;
                //     $endID =floor(($v - 1)/1000) * 1000 + 1000;
                //     $ids = $startID . '-' . $endID;
                //     $this->shopIds($ids);
                // }
                $array = array_merge($admintwo, $iddd);
            }
            if ($admin['admin_cate_id'] == 4) {
                $array[] = $data['id'];
                // $list = Db('goods_shop')->where('uid','in',$array)->select();
                // foreach ($list as $k => $v){
                //     if(!empty($v['xml'])){
                //         @unlink('.' . $v['xml']);
                //     }
                // }
                // Db('goods_shop')->where('uid','in',$array)->update(['is_audit'=>1,'is_xml'=>1,'is_indexes'=>1,'xml'=>'','indexes'=>'','xml_time'=>'']);
                // foreach($array as $k => $v){
                //     $listone = floor(($v-1)/1000);
                //     $path = '/xml' ."/indexes" . $listone . ".xml";
                //     if(file_exists('.' . $path)){
                //         @unlink('.' . $path);
                //     }
                //     $startID =floor(($v - 1)/1000) * 1000 + 1;
                //     $endID =floor(($v - 1)/1000) * 1000 + 1000;
                //     $ids = $startID . '-' . $endID;
                //     $this->shopIds($ids);
                // }
            }
            if ($admin['admin_cate_id'] == 5 || $admin['admin_cate_id'] == 6) {
                $array[] = $data['id'];
            }
            $list = Db('admin')->where('id', 'in', $array)->update(['status' => $data['status']]);
        } else {
            $list = Db('admin')->where('id', $data['id'])->update(['status' => $data['status']]);
        }
        return json(['status' => 1, 'msg' => '操作成功', 'data' => '']);
    }

    public function shopIds($ids)
    {
        $data = [];
        $data['id'] = explode('-', $ids);
        $list = Db('goods_shop')
            ->where('is_audit', 2)
            ->where('status', 1)
            ->where('id', '>=', $data['id'][0])
            ->where('id', '<=', $data['id'][1])
            ->order('id desc')
            ->select();
        if (empty($list)) {
            return json(['status' => 2, 'msg' => '暂无生成xml的商品', 'data' => '']);
        }
        $listOne = Db('goods_shop')
            ->where('is_audit', 2)
            ->where('status', 1)
            ->where('id', '>=', $data['id'][0])
            ->where('id', '<=', $data['id'][1])
            ->order('id desc')
            ->find();
        header('Content-type:text/xml;charset=utf-8');
        $heardxml = '<sitemapindex>';
        $endxml = '</sitemapindex>';
        $xml = '
<sitemap>
            <loc>%s</loc>
            <lastmod>%s</lastmod>
            </sitemap>
';
        $xmls = $heardxml;
        foreach ($list as $k => $v) {
            $xmls .= sprintf($xml, 'http://' . $_SERVER['SERVER_NAME'] . $v['xml'], date('Y-m-d H:i', $v['xml_time']));
        }
        $xmls .= $endxml;
        $numlist = floor(($listOne['id'] - 1) / 1000);
        file_put_contents('xml/indexes' . $numlist . '.xml', $xmls);
        $path = 'http://' . $_SERVER['SERVER_NAME'] . '/xml' . '/indexes' . $numlist . '.xml';
        if ($path) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $path]);
        } else {
            return json(['status' => 2, 'msg' => '操作失败', 'data' => '']);
        }
    }

    public function grpList()
    {
        $data = input('param.');
        $page = input('param.page') ?: 1;
        $limit = input('param.limit') ?: 10;
        $data['uid'] ?: returnJson(['status' => 2, 'msg' => '参数错误']);
        $list = db('element')->field($data['field'])->where('uid', $data['uid'])->where('status', 1)->limit($page, $limit)->select();
        $count = count(db('element')->field($data['field'])->where('uid', $data['uid'])->where('status', 1)->select());
        returnJson(['code' => 0, 'msg' => 'success', 'data' => $list, 'count' => $count]);
    }

    public function updateSq()
    {
        $res = db('admin')->where('id', input('post.uid'))->update([
            'sqC' => input('post.sqC')
        ]);

        $res ? returnJson(['code' => 200, 'msg' => '设置成功, 10分钟左右生效']) : returnJson(['code' => 101, 'msg' => '设置失败, 请检查商桥JS']);
    }

    public function getSettingArea()
    {
        $uidStr = $this->request->get('uid', '');
        $uidArr = explode(',', $uidStr);
        $res = GoodsShop::where('uid', $uidArr[0])
            ->where('is_audit', '=', 2)
            ->where('status', '=', 1)
            ->field('id, uid, province_id, city')
            ->find();
        $area = [
            'province' => $res['province_id'] ?? '',
            'city' => $res['city'] ?? ''
        ];
        returnJson(['code' => 0, 'msg' => 'success', 'data' => $area]);
    }

    public function setUserQuan()
    {
        $bodyData = $this->request->post();
        extract($bodyData);
        $res = adminmodel::where('id', $uid)->update(['quan_name' => $quan_name]);
        returnJson(['code' => 0, 'msg' => '操作成功', 'data' => []]);
    }

    public function getNoKeywords()
    {
        $uid = $this->request->get('uid', '');
        $noKeywordsInfo = NoKeywords::where('uid', $uid)->find();
        if (empty($noKeywordsInfo)) {
            returnJson(['code' => 1, 'msg' => 'succcess', 'data' => []]);
        }
        $noKeywordsInfo['phrase'] = json_decode($noKeywordsInfo['phrase'], true);
        $noKeywordsInfo['exact'] = json_decode($noKeywordsInfo['exact'], true);
        returnJson(['code' => 0, 'msg' => 'succcess', 'data' => $noKeywordsInfo]);
    }

    public function setNoKeywords()
    {
        $uid = $this->request->get('uid', '');
        $bodyData = $this->request->post(false);
        extract($bodyData);
        if (empty(array_filter($phrase)) && empty(array_filter($exact))) {
            returnjson(['code' => 1, 'msg' => '关键词至少一个类型不能为空', 'data' => []]);
        }
        $noKeywordsInfo = NoKeywords::where('uid', $uid)->find();
        $jsonNoKeywordInfoPhrase = array_values(array_filter(json_decode($noKeywordsInfo['phrase'], true))) ?? []; 
        $jsonNoKeywordInfoPhrases = []; 
        //halt($jsonNoKeywordInfoPhrase);
        if (count($jsonNoKeywordInfoPhrase) == count($jsonNoKeywordInfoPhrase, COUNT_RECURSIVE)) {
            foreach ($jsonNoKeywordInfoPhrase as $value) {
                $values = [
                    'keywords' => $value,
                    'create_time' => time()
                ];
                $jsonNoKeywordInfoPhrases[] = $values;
            }
            $jsonNoKeywordInfoPhrase = $jsonNoKeywordInfoPhrases;
        }
        foreach ($phrase as &$item) {
            if (empty($item)) {
                continue;
            }
            $items = [
                'keywords' => $item,
                'create_time' => time()
            ];
            $item = $items;
        }
        $jsonNoKeywordInfoExact = array_values(array_filter(json_decode($noKeywordsInfo['exact'], true))) ?? [];
        $jsonNoKeywordInfoExacts = [];
        if (count($jsonNoKeywordInfoExact) == count($jsonNoKeywordInfoExact, 1)) {
            foreach ($jsonNoKeywordInfoExact as $value) {
                $values = [
                    'keywords' => $value,
                    'create_time' => time()
                ];
                $jsonNoKeywordInfoExacts[] = $values;
            }
            $jsonNoKeywordInfoExact = $jsonNoKeywordInfoExacts;
        }
        foreach ($exact as &$item) {
            if (empty($item)) {
                continue;
            }
            $items = [
                'keywords' => $item,
                'create_time' => time()
            ];
            $item = $items;
        }

        // $phrase = array_values(array_filter(explode('PHP_EOL', $phrase ?? '')));
        // $exact = array_values(array_filter(explode('PHP_EOL', $exact ?? '')));

        if (!empty($noKeywordsInfo)) {
            $phrase = array_filter(array_merge_recursive($jsonNoKeywordInfoPhrase, $phrase));
            $exact = array_filter(array_merge_recursive($jsonNoKeywordInfoExact, $exact));
        }
        //halt($phrase);
        //halt($exact);
        // if (count($unique = array_unique($phrase)) != count($phrase)) {
        //     returnjson(['code' => 1, 'msg' => '短语否定关键词中关键词 ' . implode(', ', array_diff_assoc($phrase, $unique)) . ' 重复', 'data' => []]);
        // }
        // if (count($unique = array_unique($exact)) != count($exact)) {
        //     returnjson(['code' => 1, 'msg' => '精确否定关键词中关键词 ' . implode(', ', array_diff_assoc($exact, $unique)) . ' 重复', 'data' => []]);
        // }
        // unset($unique);
        if ($intersect = array_intersect(array_unique(array_column($phrase, 'keywords')), array_unique(array_column($exact, 'keywords')))) {
            returnjson(['code' => 1, 'msg' => '关键词 ' . implode(', ', $intersect) . ' 有且只能存在一个类型中', 'data' => []]);
        }
        //halt($exact);
        $data = [
            'uid' => $uid,
            'phrase' => json_encode($phrase ?? []),
            'exact' => json_encode($exact ?? []),
            'create_time' => time()
        ];
        if (!empty($noKeywordsInfo)) {
            $data['id'] = $noKeywordsInfo['id'];
            NoKeywords::update($data);
        } else {
            NoKeywords::create($data);
        }
        $redis = new \Redis();
        $redis->connect(Env::get('REDIS_HOST'), Env::get('REDIS_PORT'));
        $redis->auth(Env::get('REDIS_PASSWD'));
        $redis->select(0);
        $redis->lpush('hk:noKeywordsNotice', adminmodel::where('id', $uid)->value('name'));
        returnJson(['code' => 0, 'msg' => '关键词提交成功', 'data' => []]);
    }

    public function getNoKeywordsList()
    {
        $paramData = $this->request->param();
        extract($paramData);
        if (!(isset($uid) && isset($p) && isset($num))) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $pids = [$uid];
        if (in_array($roles, [5, 6])) {
            $ids = adminmodel::where('kefuid', $uid)->field('id')->select();
            $pids = array_merge_recursive($pids, array_column($ids, 'id'));
        } else {
            $func = function () use (&$uid, &$pids, &$func) {
                $plist = adminmodel::whereIn('pid', $uid)->select();
                if (empty($plist)) {
                    return;
                }
                $pids = array_merge_recursive($pids, array_column($plist, 'id'));
                foreach ($plist as $item) {
                    $uid = $item['id'];
                    $func();
                }
            };
            $func();
        }
        $where = [];
        if (!empty($name)) {
            $uids = Db('admin')->where('name', $name)->value('id');
            in_array($uids, $pids) && $where['uid'] = ['=', $uids];
        } else {
            $where['uid'] = ['in', $pids];
        }

        $list = NoKeywords::where($where)->group('uid')->with('users')->paginate($num ?? 10, false, ['page' => $p]);
        $lists = $list->toArray();
        foreach ($lists['data'] as &$item) {
            $item['exact'] = count(json_decode($item['exact'], true));
            $item['phrase'] = count(json_decode($item['phrase'], true));
        }

        if ($lists) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $lists, 'count' => $list->count()]);
        } else {
            return json(['status' => 1, 'msg' => '暂无数据', 'data' => '']);
        }
    }

    public function getNoKeywordsListView()
    {
        $paramData = $this->request->param();
        extract($paramData);
        if (!(isset($uid) && isset($p) && isset($num))) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $where['uid'] = $uid;

        $list = NoKeywords::where($where)->with(['users', 'no_keywords_use_data'])->paginate(200, false, ['page' => $p]);
        $lists = $list->toArray();
        $listDecide = [];
        foreach ($lists['data'] as $item) {
            $use = array_column($item['no_keywords_use_data'], 'keywords');
            $exact = json_decode($item['exact'], true);
            foreach ($exact as $items) {
                if (empty($items) || empty($items['keywords'] ?? '')) {
                    continue;
                }
                $listDecide[] = [
                    'id' => $item['id'],
                    'type' => '精确',
                    'name' => $item['users']['name'],
                    'keywords' => $items,
                    'create_time' => $item['create_time'],
                    'is_use' => in_array($items['keywords'] ?? '', $use) ? true : false
                ];
            }
            $phrase = json_decode($item['phrase'], true);
            foreach ($phrase as $items) {
                if (empty($items) || empty($items['keywords'] ?? '')) {
                    continue;
                }
                $listDecide[] = [
                    'id' => $item['id'],
                    'type' => '短语',
                    'name' => $item['users']['name'],
                    'keywords' => $items,
                    'create_time' => $item['create_time'],
                    'is_use' => in_array($items['keywords'] ?? '', $use) ? true : false
                ];
            }
        }

        if ($listDecide) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => $listDecide, 'count' => count($listDecide)]);
        } else {
            return json(['status' => 1, 'msg' => '暂无数据', 'data' => '']);
        }
    }

    public function noKeywordsDel()
    {
        $paramData = $this->request->param();
        extract($paramData);
        $keywords = $keywords['keywords'];
        if (!(isset($id) && isset($keywords))) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $where['id'] = $id;
        $info = NoKeywords::where($where)->find();
        $phrase = json_decode($info['phrase'], true);
        $keywordsUse = [];
        foreach ($phrase as $key => $item) {
            if ($item['keywords'] == $keywords) {
                unset($phrase[$key]);
                $keywordsUse[] = $keywords;
            }
        }
        $exact = json_decode($info['exact'], true);
        foreach ($exact as $key => $item) {
            if ($item['keywords'] == $keywords) {
                unset($exact[$key]);
                $keywordsUse[] = $keywords;
            }
        }
        //halt($phrase);
        $info->phrase = json_encode($phrase);
        $info->exact = json_encode($exact);
        $res = $info->save();

        !empty($keywordsUse) && (new NoKeywordsUse())->where('keywords', 'in', $keywordsUse)->delete();

        if ($res) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => []]);
        }
        return json(['status' => 0, 'msg' => '操作失败', 'data' => []]);
    }

    public function noKeywordsUse()
    {
        $bodyData = $this->request->param();
        extract($bodyData);
        if (!isset($data)) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $insData = [];
        foreach ($data as $item) {
            $insData[] = [
                'no_id' => $item['id'],
                'keywords' => $item['keywords']['keywords'],
            ];
        }
        $res = (new NoKeywordsUse())->saveAll($insData);
        if ($res) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => []]);
        }
        return json(['status' => 0, 'msg' => '操作失败', 'data' => []]);
    }

    public function noKeywordsDelAll()
    {
        $paramData = $this->request->param();
        extract($paramData);
        if (!isset($data)) {
            return json(['status' => 2, 'msg' => '参数错误', 'data' => '']);
        }
        $where['id'] = $data[0]['id'];
        $info = NoKeywords::where($where)->find();
        $phrase = json_decode($info['phrase'], true);
        $keywordsUse = [];
        foreach ($phrase as $key => $item) {
            foreach ($data as $items) {
                if ($item['keywords'] == $items['keywords']['keywords']) {
                    unset($phrase[$key]);
                    $keywordsUse[] = $items['keywords']['keywords'];
                }
            }
        }
        $exact = json_decode($info['exact'], true);
        foreach ($exact as $key => $item) {
            foreach ($data as $items) {
                if ($item['keywords'] == $items['keywords']['keywords']) {
                    unset($exact[$key]);
                    $keywordsUse[] = $items['keywords']['keywords'];
                }
            }
        }
        $info->phrase = json_encode($phrase);
        $info->exact = json_encode($exact);
        $res = $info->save();

        !empty($keywordsUse) && (new NoKeywordsUse())->where('keywords', 'in', $keywordsUse)->delete();

        if ($res) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => []]);
        }
        return json(['status' => 0, 'msg' => '操作失败', 'data' => []]);
    }

    public function setReport()
    {
        $ids = $this->request->post('ids/a', []);
        if (empty($ids)) {
            return json(['status' => 0, 'msg' => '未选择用户', 'data' => []]);
        }
        $dates = $this->request->post('dates');
        preg_match('/^[\d]{4}-[\d]{2}-[\d]{2}$/', $dates, $matches);
        if (empty($dates) || empty($matches)) {
            return json(['status' => 0, 'msg' => '日期格式错误', 'data' => []]);
        }
        // if ($dates == date('Y-m-d')) {
        //     return json(['status' => 0, 'msg' => '日期只能为今日之前', 'data' => []]);
        // }
        $redisData = compact('ids', 'dates');
        $redis = new \Redis();
        $redis->connect(Env::get('REDIS_HOST'), Env::get('REDIS_PORT'));
        $redis->auth(Env::get('REDIS_PASSWD'));
        $redis->select(0);
        $res = $redis->lpush('hk:report', json_encode($redisData));
        if ($res) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => []]);
        }
        return json(['status' => 0, 'msg' => '操作失败', 'data' => []]);
    }

    public function setQuanReport()
    {
        $ids = $this->request->post('ids/a', []);
        if (empty($ids)) {
            return json(['status' => 0, 'msg' => '未选择用户', 'data' => []]);
        }
        $dates = $this->request->post('dates');
        preg_match('/^[\d]{4}-[\d]{2}-[\d]{2}$/', $dates, $matches);
        if (empty($dates) || empty($matches)) {
            return json(['status' => 0, 'msg' => '日期格式错误', 'data' => []]);
        }
        if ($dates == date('Y-m-d')) {
            return json(['status' => 0, 'msg' => '日期只能为今日之前', 'data' => []]);
        }
        $redisData = compact('ids', 'dates');
        $redis = new \Redis();
        $redis->connect(Env::get('REDIS_HOST'), Env::get('REDIS_PORT'));
        $redis->auth(Env::get('REDIS_PASSWD'));
        $redis->select(0);
        $res = $redis->lpush('hk:quanreport', json_encode($redisData));
        if ($res) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => []]);
        }
        return json(['status' => 0, 'msg' => '操作失败', 'data' => []]);
    }

    public function exportAll()
    {
        //让程序一直运行
        set_time_limit(0);
        //设置程序运行内存
        ini_set('memory_limit', '128M');
        //导出文件名
        $fileName = time() . '-' . date('Ymd');
        header('Content-Encoding: UTF-8');
        header('Content-type:application/vnd.ms-excel;charset=UTF-8');
        header('Content-Disposition: attachment;filename="' . $fileName . '.csv"');
        //打开php标准输出流
        $fp = fopen('php://output', 'a');
        //添加BOM头，以UTF8编码导出CSV文件，如果文件头未添加BOM头，打开会出现乱码。
        fwrite($fp, chr(0xEF) . chr(0xBB) . chr(0xBF));
        $header = ['ID', '用户名称', '全网推用户名称', '代理商名称', '商品数量', '注册时间', '状态', '充值', '余额', '今日消费', '昨日消费'];
        // foreach ($header as $key => $item) {
        //     $header_data[$key] = iconv('utf-8', 'gbk', $item);
        // }
        fputcsv($fp, $header);
        $list = Db('admin')->where('admin_cate_id', 4)->where('del', 1)->select();
        $today = strtotime(date('Y-m-d 00:00:00'));
        $yestoday = $today - 60 * 60 * 24;
        foreach ($list as $key => $item) {
            $tmp = [
                $item['id'],
                $item['name'],
                $item['quan_name'],
                adminmodel::where('id', $item['pid'])->value('name') ?? '',
                GoodsShop::where('uid', $item['id'])->count('id') ?? 0,
                ($item['add_time'] ? date('Y-m-d H:i:s', $item['add_time']) : ''),
                ($item['status'] ? '开启' : '关闭'),
                $item['money'],
                $item['balance'],
                (float)Db('finance_fauxsumerism')->where('uid', $item['id'])->where('add_time', '>=', $today)->sum('money'),
                (float)Db('finance_fauxsumerism')->where('uid', $item['id'])->where('add_time', '>=', $yestoday)->where('add_time', '<', $today)->sum('money')
            ];
            // foreach ($tmp as $key => $value) {
            //     $tmp[$key] = iconv('utf-8', 'gbk', $value);
            // }
            fputcsv($fp, $tmp);
        }
        fclose($fp);
        exit;
    }

    public function setAccount()
    {
        $bodyData = $this->request->post();
        $redis = new \Redis();
        $redis->connect(Env::get('REDIS_HOST'), Env::get('REDIS_PORT'));
        $redis->auth(Env::get('REDIS_PASSWD'));
        $redis->select(0);
        $res = $redis->lpush('account', json_encode($bodyData));
        if ($res) {
            return json(['status' => 1, 'msg' => '操作成功', 'data' => []]);
        }
        return json(['status' => 0, 'msg' => '操作失败', 'data' => []]);
    }
}
